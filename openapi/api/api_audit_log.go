/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// Linger please
var (
	_ context.Context
)

// AuditLogApiService AuditLogApi service
type AuditLogApiService service

type ApiGetApiAuditLogsRequest struct {
	ctx context.Context
	ApiService *AuditLogApiService
	apiKind *string
	fromEpochMs *int32
	toEpochMs *int32
	limit *int32
	lastEvaluatedKey *string
}

// Filter item for audit log retrieval by API kind (e.g. &#x60;/v1/auth&#x60;).
func (r ApiGetApiAuditLogsRequest) ApiKind(apiKind string) ApiGetApiAuditLogsRequest {
	r.apiKind = &apiKind
	return r
}
// Start time for the log search range (unixtime milliseconds).
func (r ApiGetApiAuditLogsRequest) FromEpochMs(fromEpochMs int32) ApiGetApiAuditLogsRequest {
	r.fromEpochMs = &fromEpochMs
	return r
}
// End time for the log search range (unixtime milliseconds).
func (r ApiGetApiAuditLogsRequest) ToEpochMs(toEpochMs int32) ApiGetApiAuditLogsRequest {
	r.toEpochMs = &toEpochMs
	return r
}
// Maximum number of log entries to retrieve.
func (r ApiGetApiAuditLogsRequest) Limit(limit int32) ApiGetApiAuditLogsRequest {
	r.limit = &limit
	return r
}
// The value of &#x60;requestedTimeEpochMs&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
func (r ApiGetApiAuditLogsRequest) LastEvaluatedKey(lastEvaluatedKey string) ApiGetApiAuditLogsRequest {
	r.lastEvaluatedKey = &lastEvaluatedKey
	return r
}

func (r ApiGetApiAuditLogsRequest) Execute() ([]APIAuditLogEntry, *http.Response, error) {
	return r.ApiService.GetApiAuditLogsExecute(r)
}

/*
GetApiAuditLogs Retrieve audit logs for API calls

Retrieve audit logs for API calls.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiAuditLogsRequest
*/
func (a *AuditLogApiService) GetApiAuditLogs(ctx context.Context) ApiGetApiAuditLogsRequest {
	return ApiGetApiAuditLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []APIAuditLogEntry
func (a *AuditLogApiService) GetApiAuditLogsExecute(r ApiGetApiAuditLogsRequest) ([]APIAuditLogEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []APIAuditLogEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogApiService.GetApiAuditLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_logs/api"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.apiKind != nil {
		localVarQueryParams.Add("api_kind", parameterToString(*r.apiKind, ""))
	}
	if r.fromEpochMs != nil {
		localVarQueryParams.Add("from_epoch_ms", parameterToString(*r.fromEpochMs, ""))
	}
	if r.toEpochMs != nil {
		localVarQueryParams.Add("to_epoch_ms", parameterToString(*r.toEpochMs, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.lastEvaluatedKey != nil {
		localVarQueryParams.Add("last_evaluated_key", parameterToString(*r.lastEvaluatedKey, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Soracom-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Soracom-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNapterAuditLogsRequest struct {
	ctx context.Context
	ApiService *AuditLogApiService
	resourceType *string
	resourceId *string
	from *int32
	to *int32
	limit *int32
	lastEvaluatedKey *string
}

// Type of the target resource to query Napter audit log entries.
func (r ApiGetNapterAuditLogsRequest) ResourceType(resourceType string) ApiGetNapterAuditLogsRequest {
	r.resourceType = &resourceType
	return r
}
// Identity of the target resource to query log entries.
func (r ApiGetNapterAuditLogsRequest) ResourceId(resourceId string) ApiGetNapterAuditLogsRequest {
	r.resourceId = &resourceId
	return r
}
// Start time for the log search range (unixtime milliseconds).
func (r ApiGetNapterAuditLogsRequest) From(from int32) ApiGetNapterAuditLogsRequest {
	r.from = &from
	return r
}
// End time for the log search range (unixtime milliseconds).
func (r ApiGetNapterAuditLogsRequest) To(to int32) ApiGetNapterAuditLogsRequest {
	r.to = &to
	return r
}
// Maximum number of log entries to retrieve.
func (r ApiGetNapterAuditLogsRequest) Limit(limit int32) ApiGetNapterAuditLogsRequest {
	r.limit = &limit
	return r
}
// The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward.
func (r ApiGetNapterAuditLogsRequest) LastEvaluatedKey(lastEvaluatedKey string) ApiGetNapterAuditLogsRequest {
	r.lastEvaluatedKey = &lastEvaluatedKey
	return r
}

func (r ApiGetNapterAuditLogsRequest) Execute() ([]NapterAuditLogEntry, *http.Response, error) {
	return r.ApiService.GetNapterAuditLogsExecute(r)
}

/*
GetNapterAuditLogs Retrieve audit logs for Napter

Retrieve audit logs for Napter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetNapterAuditLogsRequest
*/
func (a *AuditLogApiService) GetNapterAuditLogs(ctx context.Context) ApiGetNapterAuditLogsRequest {
	return ApiGetNapterAuditLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []NapterAuditLogEntry
func (a *AuditLogApiService) GetNapterAuditLogsExecute(r ApiGetNapterAuditLogsRequest) ([]NapterAuditLogEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []NapterAuditLogEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogApiService.GetNapterAuditLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit_logs/napter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.resourceType != nil {
		localVarQueryParams.Add("resource_type", parameterToString(*r.resourceType, ""))
	}
	if r.resourceId != nil {
		localVarQueryParams.Add("resource_id", parameterToString(*r.resourceId, ""))
	}
	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.to != nil {
		localVarQueryParams.Add("to", parameterToString(*r.to, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.lastEvaluatedKey != nil {
		localVarQueryParams.Add("last_evaluated_key", parameterToString(*r.lastEvaluatedKey, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Soracom-API-Key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Soracom-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
