/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ActionConfig struct for ActionConfig
type ActionConfig struct {
	Properties ActionConfigProperty `json:"properties"`
	Type string `json:"type"`
}

// NewActionConfig instantiates a new ActionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionConfig(properties ActionConfigProperty, type_ string) *ActionConfig {
	this := ActionConfig{}
	this.Properties = properties
	this.Type = type_
	return &this
}

// NewActionConfigWithDefaults instantiates a new ActionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionConfigWithDefaults() *ActionConfig {
	this := ActionConfig{}
	return &this
}

// GetProperties returns the Properties field value
func (o *ActionConfig) GetProperties() ActionConfigProperty {
	if o == nil {
		var ret ActionConfigProperty
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *ActionConfig) GetPropertiesOk() (*ActionConfigProperty, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *ActionConfig) SetProperties(v ActionConfigProperty) {
	o.Properties = v
}

// GetType returns the Type field value
func (o *ActionConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ActionConfig) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ActionConfig) SetType(v string) {
	o.Type = v
}

func (o ActionConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["properties"] = o.Properties
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableActionConfig struct {
	value *ActionConfig
	isSet bool
}

func (v NullableActionConfig) Get() *ActionConfig {
	return v.value
}

func (v *NullableActionConfig) Set(val *ActionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableActionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableActionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionConfig(val *ActionConfig) *NullableActionConfig {
	return &NullableActionConfig{value: val, isSet: true}
}

func (v NullableActionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


