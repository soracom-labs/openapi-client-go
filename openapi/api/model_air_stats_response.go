/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// AirStatsResponse struct for AirStatsResponse
type AirStatsResponse struct {
	DataTrafficStatsMap *map[string]DataTrafficStats `json:"dataTrafficStatsMap,omitempty"`
	Date *string `json:"date,omitempty"`
	Unixtime *int64 `json:"unixtime,omitempty"`
}

// NewAirStatsResponse instantiates a new AirStatsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirStatsResponse() *AirStatsResponse {
	this := AirStatsResponse{}
	return &this
}

// NewAirStatsResponseWithDefaults instantiates a new AirStatsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirStatsResponseWithDefaults() *AirStatsResponse {
	this := AirStatsResponse{}
	return &this
}

// GetDataTrafficStatsMap returns the DataTrafficStatsMap field value if set, zero value otherwise.
func (o *AirStatsResponse) GetDataTrafficStatsMap() map[string]DataTrafficStats {
	if o == nil || o.DataTrafficStatsMap == nil {
		var ret map[string]DataTrafficStats
		return ret
	}
	return *o.DataTrafficStatsMap
}

// GetDataTrafficStatsMapOk returns a tuple with the DataTrafficStatsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirStatsResponse) GetDataTrafficStatsMapOk() (*map[string]DataTrafficStats, bool) {
	if o == nil || o.DataTrafficStatsMap == nil {
		return nil, false
	}
	return o.DataTrafficStatsMap, true
}

// HasDataTrafficStatsMap returns a boolean if a field has been set.
func (o *AirStatsResponse) HasDataTrafficStatsMap() bool {
	if o != nil && o.DataTrafficStatsMap != nil {
		return true
	}

	return false
}

// SetDataTrafficStatsMap gets a reference to the given map[string]DataTrafficStats and assigns it to the DataTrafficStatsMap field.
func (o *AirStatsResponse) SetDataTrafficStatsMap(v map[string]DataTrafficStats) {
	o.DataTrafficStatsMap = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *AirStatsResponse) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirStatsResponse) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *AirStatsResponse) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *AirStatsResponse) SetDate(v string) {
	o.Date = &v
}

// GetUnixtime returns the Unixtime field value if set, zero value otherwise.
func (o *AirStatsResponse) GetUnixtime() int64 {
	if o == nil || o.Unixtime == nil {
		var ret int64
		return ret
	}
	return *o.Unixtime
}

// GetUnixtimeOk returns a tuple with the Unixtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirStatsResponse) GetUnixtimeOk() (*int64, bool) {
	if o == nil || o.Unixtime == nil {
		return nil, false
	}
	return o.Unixtime, true
}

// HasUnixtime returns a boolean if a field has been set.
func (o *AirStatsResponse) HasUnixtime() bool {
	if o != nil && o.Unixtime != nil {
		return true
	}

	return false
}

// SetUnixtime gets a reference to the given int64 and assigns it to the Unixtime field.
func (o *AirStatsResponse) SetUnixtime(v int64) {
	o.Unixtime = &v
}

func (o AirStatsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataTrafficStatsMap != nil {
		toSerialize["dataTrafficStatsMap"] = o.DataTrafficStatsMap
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Unixtime != nil {
		toSerialize["unixtime"] = o.Unixtime
	}
	return json.Marshal(toSerialize)
}

type NullableAirStatsResponse struct {
	value *AirStatsResponse
	isSet bool
}

func (v NullableAirStatsResponse) Get() *AirStatsResponse {
	return v.value
}

func (v *NullableAirStatsResponse) Set(val *AirStatsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAirStatsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAirStatsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirStatsResponse(val *AirStatsResponse) *NullableAirStatsResponse {
	return &NullableAirStatsResponse{value: val, isSet: true}
}

func (v NullableAirStatsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirStatsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


