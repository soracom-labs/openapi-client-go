/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// BeamStatsResponse struct for BeamStatsResponse
type BeamStatsResponse struct {
	BeamStatsMap *map[string]SoracomBeamStats `json:"beamStatsMap,omitempty"`
	Date *string `json:"date,omitempty"`
	Unixtime *int64 `json:"unixtime,omitempty"`
}

// NewBeamStatsResponse instantiates a new BeamStatsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeamStatsResponse() *BeamStatsResponse {
	this := BeamStatsResponse{}
	return &this
}

// NewBeamStatsResponseWithDefaults instantiates a new BeamStatsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeamStatsResponseWithDefaults() *BeamStatsResponse {
	this := BeamStatsResponse{}
	return &this
}

// GetBeamStatsMap returns the BeamStatsMap field value if set, zero value otherwise.
func (o *BeamStatsResponse) GetBeamStatsMap() map[string]SoracomBeamStats {
	if o == nil || o.BeamStatsMap == nil {
		var ret map[string]SoracomBeamStats
		return ret
	}
	return *o.BeamStatsMap
}

// GetBeamStatsMapOk returns a tuple with the BeamStatsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeamStatsResponse) GetBeamStatsMapOk() (*map[string]SoracomBeamStats, bool) {
	if o == nil || o.BeamStatsMap == nil {
		return nil, false
	}
	return o.BeamStatsMap, true
}

// HasBeamStatsMap returns a boolean if a field has been set.
func (o *BeamStatsResponse) HasBeamStatsMap() bool {
	if o != nil && o.BeamStatsMap != nil {
		return true
	}

	return false
}

// SetBeamStatsMap gets a reference to the given map[string]SoracomBeamStats and assigns it to the BeamStatsMap field.
func (o *BeamStatsResponse) SetBeamStatsMap(v map[string]SoracomBeamStats) {
	o.BeamStatsMap = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BeamStatsResponse) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeamStatsResponse) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BeamStatsResponse) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *BeamStatsResponse) SetDate(v string) {
	o.Date = &v
}

// GetUnixtime returns the Unixtime field value if set, zero value otherwise.
func (o *BeamStatsResponse) GetUnixtime() int64 {
	if o == nil || o.Unixtime == nil {
		var ret int64
		return ret
	}
	return *o.Unixtime
}

// GetUnixtimeOk returns a tuple with the Unixtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeamStatsResponse) GetUnixtimeOk() (*int64, bool) {
	if o == nil || o.Unixtime == nil {
		return nil, false
	}
	return o.Unixtime, true
}

// HasUnixtime returns a boolean if a field has been set.
func (o *BeamStatsResponse) HasUnixtime() bool {
	if o != nil && o.Unixtime != nil {
		return true
	}

	return false
}

// SetUnixtime gets a reference to the given int64 and assigns it to the Unixtime field.
func (o *BeamStatsResponse) SetUnixtime(v int64) {
	o.Unixtime = &v
}

func (o BeamStatsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BeamStatsMap != nil {
		toSerialize["beamStatsMap"] = o.BeamStatsMap
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Unixtime != nil {
		toSerialize["unixtime"] = o.Unixtime
	}
	return json.Marshal(toSerialize)
}

type NullableBeamStatsResponse struct {
	value *BeamStatsResponse
	isSet bool
}

func (v NullableBeamStatsResponse) Get() *BeamStatsResponse {
	return v.value
}

func (v *NullableBeamStatsResponse) Set(val *BeamStatsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBeamStatsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBeamStatsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeamStatsResponse(val *BeamStatsResponse) *NullableBeamStatsResponse {
	return &NullableBeamStatsResponse{value: val, isSet: true}
}

func (v NullableBeamStatsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeamStatsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


