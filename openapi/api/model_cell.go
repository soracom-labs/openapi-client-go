/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Cell struct for Cell
type Cell struct {
	// The Cell Identity (for 2G and 3G networks), a 16 bit value represented in decimal form as an integer. (See 3GPP TS 23.003 4.3)
	Ci *int32 `json:"ci,omitempty"`
	// The E-UTRAN Cell Identifier (for LTE networks), a 28 bit value represented in decimal form as a long. (See 3GPP TS 23.003 19.6)
	Eci *int32 `json:"eci,omitempty"`
	// The Location Area Code (for 2G and 3G networks), a 16 bit value represented in decimal form as an integer. (See 3GPP TS 23.003 4.1)
	Lac *int32 `json:"lac,omitempty"`
	// The Mobile Country Code, a 3 digit number.
	Mcc *int32 `json:"mcc,omitempty"`
	// The Mobile Network Code, a 2 or 3 digit number. If the value returned is only 1 digit in length, then you should prepend the value with a leading zero.
	Mnc *int32 `json:"mnc,omitempty"`
	// The Routing Area Code (for 2G and 3G networks), an 8 bit value represented in decimal form as an integer. (See 3GPP TS 23.003 4.2)
	Rac *int32 `json:"rac,omitempty"`
	// The Radio Access Technology or type of network that the device is connected to. Possible values are \"gsm\" for 2G or 3G networks, or \"lte\" for LTE networks. Unfortunately, it is not possible to differentiate 2G from 3G, or LTE from LTE Cat-M1.
	RadioType *string `json:"radioType,omitempty"`
	// The Service Area Code (for 2G and 3G networks), a 16 bit value represented in decimal form as an integer. (See 3GPP TS 23.003 12.5)
	Sac *int32 `json:"sac,omitempty"`
	// The Tracking Area Code (for LTE networks), a 16 bit value represented in decimal form as an integer. (See 3GPP TS 23.003 19.4.2.3)
	Tac *int32 `json:"tac,omitempty"`
}

// NewCell instantiates a new Cell object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCell() *Cell {
	this := Cell{}
	return &this
}

// NewCellWithDefaults instantiates a new Cell object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCellWithDefaults() *Cell {
	this := Cell{}
	return &this
}

// GetCi returns the Ci field value if set, zero value otherwise.
func (o *Cell) GetCi() int32 {
	if o == nil || o.Ci == nil {
		var ret int32
		return ret
	}
	return *o.Ci
}

// GetCiOk returns a tuple with the Ci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetCiOk() (*int32, bool) {
	if o == nil || o.Ci == nil {
		return nil, false
	}
	return o.Ci, true
}

// HasCi returns a boolean if a field has been set.
func (o *Cell) HasCi() bool {
	if o != nil && o.Ci != nil {
		return true
	}

	return false
}

// SetCi gets a reference to the given int32 and assigns it to the Ci field.
func (o *Cell) SetCi(v int32) {
	o.Ci = &v
}

// GetEci returns the Eci field value if set, zero value otherwise.
func (o *Cell) GetEci() int32 {
	if o == nil || o.Eci == nil {
		var ret int32
		return ret
	}
	return *o.Eci
}

// GetEciOk returns a tuple with the Eci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetEciOk() (*int32, bool) {
	if o == nil || o.Eci == nil {
		return nil, false
	}
	return o.Eci, true
}

// HasEci returns a boolean if a field has been set.
func (o *Cell) HasEci() bool {
	if o != nil && o.Eci != nil {
		return true
	}

	return false
}

// SetEci gets a reference to the given int32 and assigns it to the Eci field.
func (o *Cell) SetEci(v int32) {
	o.Eci = &v
}

// GetLac returns the Lac field value if set, zero value otherwise.
func (o *Cell) GetLac() int32 {
	if o == nil || o.Lac == nil {
		var ret int32
		return ret
	}
	return *o.Lac
}

// GetLacOk returns a tuple with the Lac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetLacOk() (*int32, bool) {
	if o == nil || o.Lac == nil {
		return nil, false
	}
	return o.Lac, true
}

// HasLac returns a boolean if a field has been set.
func (o *Cell) HasLac() bool {
	if o != nil && o.Lac != nil {
		return true
	}

	return false
}

// SetLac gets a reference to the given int32 and assigns it to the Lac field.
func (o *Cell) SetLac(v int32) {
	o.Lac = &v
}

// GetMcc returns the Mcc field value if set, zero value otherwise.
func (o *Cell) GetMcc() int32 {
	if o == nil || o.Mcc == nil {
		var ret int32
		return ret
	}
	return *o.Mcc
}

// GetMccOk returns a tuple with the Mcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetMccOk() (*int32, bool) {
	if o == nil || o.Mcc == nil {
		return nil, false
	}
	return o.Mcc, true
}

// HasMcc returns a boolean if a field has been set.
func (o *Cell) HasMcc() bool {
	if o != nil && o.Mcc != nil {
		return true
	}

	return false
}

// SetMcc gets a reference to the given int32 and assigns it to the Mcc field.
func (o *Cell) SetMcc(v int32) {
	o.Mcc = &v
}

// GetMnc returns the Mnc field value if set, zero value otherwise.
func (o *Cell) GetMnc() int32 {
	if o == nil || o.Mnc == nil {
		var ret int32
		return ret
	}
	return *o.Mnc
}

// GetMncOk returns a tuple with the Mnc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetMncOk() (*int32, bool) {
	if o == nil || o.Mnc == nil {
		return nil, false
	}
	return o.Mnc, true
}

// HasMnc returns a boolean if a field has been set.
func (o *Cell) HasMnc() bool {
	if o != nil && o.Mnc != nil {
		return true
	}

	return false
}

// SetMnc gets a reference to the given int32 and assigns it to the Mnc field.
func (o *Cell) SetMnc(v int32) {
	o.Mnc = &v
}

// GetRac returns the Rac field value if set, zero value otherwise.
func (o *Cell) GetRac() int32 {
	if o == nil || o.Rac == nil {
		var ret int32
		return ret
	}
	return *o.Rac
}

// GetRacOk returns a tuple with the Rac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetRacOk() (*int32, bool) {
	if o == nil || o.Rac == nil {
		return nil, false
	}
	return o.Rac, true
}

// HasRac returns a boolean if a field has been set.
func (o *Cell) HasRac() bool {
	if o != nil && o.Rac != nil {
		return true
	}

	return false
}

// SetRac gets a reference to the given int32 and assigns it to the Rac field.
func (o *Cell) SetRac(v int32) {
	o.Rac = &v
}

// GetRadioType returns the RadioType field value if set, zero value otherwise.
func (o *Cell) GetRadioType() string {
	if o == nil || o.RadioType == nil {
		var ret string
		return ret
	}
	return *o.RadioType
}

// GetRadioTypeOk returns a tuple with the RadioType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetRadioTypeOk() (*string, bool) {
	if o == nil || o.RadioType == nil {
		return nil, false
	}
	return o.RadioType, true
}

// HasRadioType returns a boolean if a field has been set.
func (o *Cell) HasRadioType() bool {
	if o != nil && o.RadioType != nil {
		return true
	}

	return false
}

// SetRadioType gets a reference to the given string and assigns it to the RadioType field.
func (o *Cell) SetRadioType(v string) {
	o.RadioType = &v
}

// GetSac returns the Sac field value if set, zero value otherwise.
func (o *Cell) GetSac() int32 {
	if o == nil || o.Sac == nil {
		var ret int32
		return ret
	}
	return *o.Sac
}

// GetSacOk returns a tuple with the Sac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetSacOk() (*int32, bool) {
	if o == nil || o.Sac == nil {
		return nil, false
	}
	return o.Sac, true
}

// HasSac returns a boolean if a field has been set.
func (o *Cell) HasSac() bool {
	if o != nil && o.Sac != nil {
		return true
	}

	return false
}

// SetSac gets a reference to the given int32 and assigns it to the Sac field.
func (o *Cell) SetSac(v int32) {
	o.Sac = &v
}

// GetTac returns the Tac field value if set, zero value otherwise.
func (o *Cell) GetTac() int32 {
	if o == nil || o.Tac == nil {
		var ret int32
		return ret
	}
	return *o.Tac
}

// GetTacOk returns a tuple with the Tac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetTacOk() (*int32, bool) {
	if o == nil || o.Tac == nil {
		return nil, false
	}
	return o.Tac, true
}

// HasTac returns a boolean if a field has been set.
func (o *Cell) HasTac() bool {
	if o != nil && o.Tac != nil {
		return true
	}

	return false
}

// SetTac gets a reference to the given int32 and assigns it to the Tac field.
func (o *Cell) SetTac(v int32) {
	o.Tac = &v
}

func (o Cell) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ci != nil {
		toSerialize["ci"] = o.Ci
	}
	if o.Eci != nil {
		toSerialize["eci"] = o.Eci
	}
	if o.Lac != nil {
		toSerialize["lac"] = o.Lac
	}
	if o.Mcc != nil {
		toSerialize["mcc"] = o.Mcc
	}
	if o.Mnc != nil {
		toSerialize["mnc"] = o.Mnc
	}
	if o.Rac != nil {
		toSerialize["rac"] = o.Rac
	}
	if o.RadioType != nil {
		toSerialize["radioType"] = o.RadioType
	}
	if o.Sac != nil {
		toSerialize["sac"] = o.Sac
	}
	if o.Tac != nil {
		toSerialize["tac"] = o.Tac
	}
	return json.Marshal(toSerialize)
}

type NullableCell struct {
	value *Cell
	isSet bool
}

func (v NullableCell) Get() *Cell {
	return v.value
}

func (v *NullableCell) Set(val *Cell) {
	v.value = val
	v.isSet = true
}

func (v NullableCell) IsSet() bool {
	return v.isSet
}

func (v *NullableCell) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCell(val *Cell) *NullableCell {
	return &NullableCell{value: val, isSet: true}
}

func (v NullableCell) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCell) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


