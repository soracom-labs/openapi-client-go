/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CellIdentifier struct for CellIdentifier
type CellIdentifier struct {
	Cid *string `json:"cid,omitempty"`
	Eci *string `json:"eci,omitempty"`
	Ecid *string `json:"ecid,omitempty"`
	// optionally link the result to the request
	Identifier *string `json:"identifier,omitempty"`
	Lac *string `json:"lac,omitempty"`
	Mcc *string `json:"mcc,omitempty"`
	Mnc *string `json:"mnc,omitempty"`
	Tac *string `json:"tac,omitempty"`
}

// NewCellIdentifier instantiates a new CellIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCellIdentifier() *CellIdentifier {
	this := CellIdentifier{}
	return &this
}

// NewCellIdentifierWithDefaults instantiates a new CellIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCellIdentifierWithDefaults() *CellIdentifier {
	this := CellIdentifier{}
	return &this
}

// GetCid returns the Cid field value if set, zero value otherwise.
func (o *CellIdentifier) GetCid() string {
	if o == nil || o.Cid == nil {
		var ret string
		return ret
	}
	return *o.Cid
}

// GetCidOk returns a tuple with the Cid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellIdentifier) GetCidOk() (*string, bool) {
	if o == nil || o.Cid == nil {
		return nil, false
	}
	return o.Cid, true
}

// HasCid returns a boolean if a field has been set.
func (o *CellIdentifier) HasCid() bool {
	if o != nil && o.Cid != nil {
		return true
	}

	return false
}

// SetCid gets a reference to the given string and assigns it to the Cid field.
func (o *CellIdentifier) SetCid(v string) {
	o.Cid = &v
}

// GetEci returns the Eci field value if set, zero value otherwise.
func (o *CellIdentifier) GetEci() string {
	if o == nil || o.Eci == nil {
		var ret string
		return ret
	}
	return *o.Eci
}

// GetEciOk returns a tuple with the Eci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellIdentifier) GetEciOk() (*string, bool) {
	if o == nil || o.Eci == nil {
		return nil, false
	}
	return o.Eci, true
}

// HasEci returns a boolean if a field has been set.
func (o *CellIdentifier) HasEci() bool {
	if o != nil && o.Eci != nil {
		return true
	}

	return false
}

// SetEci gets a reference to the given string and assigns it to the Eci field.
func (o *CellIdentifier) SetEci(v string) {
	o.Eci = &v
}

// GetEcid returns the Ecid field value if set, zero value otherwise.
func (o *CellIdentifier) GetEcid() string {
	if o == nil || o.Ecid == nil {
		var ret string
		return ret
	}
	return *o.Ecid
}

// GetEcidOk returns a tuple with the Ecid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellIdentifier) GetEcidOk() (*string, bool) {
	if o == nil || o.Ecid == nil {
		return nil, false
	}
	return o.Ecid, true
}

// HasEcid returns a boolean if a field has been set.
func (o *CellIdentifier) HasEcid() bool {
	if o != nil && o.Ecid != nil {
		return true
	}

	return false
}

// SetEcid gets a reference to the given string and assigns it to the Ecid field.
func (o *CellIdentifier) SetEcid(v string) {
	o.Ecid = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *CellIdentifier) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellIdentifier) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *CellIdentifier) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *CellIdentifier) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetLac returns the Lac field value if set, zero value otherwise.
func (o *CellIdentifier) GetLac() string {
	if o == nil || o.Lac == nil {
		var ret string
		return ret
	}
	return *o.Lac
}

// GetLacOk returns a tuple with the Lac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellIdentifier) GetLacOk() (*string, bool) {
	if o == nil || o.Lac == nil {
		return nil, false
	}
	return o.Lac, true
}

// HasLac returns a boolean if a field has been set.
func (o *CellIdentifier) HasLac() bool {
	if o != nil && o.Lac != nil {
		return true
	}

	return false
}

// SetLac gets a reference to the given string and assigns it to the Lac field.
func (o *CellIdentifier) SetLac(v string) {
	o.Lac = &v
}

// GetMcc returns the Mcc field value if set, zero value otherwise.
func (o *CellIdentifier) GetMcc() string {
	if o == nil || o.Mcc == nil {
		var ret string
		return ret
	}
	return *o.Mcc
}

// GetMccOk returns a tuple with the Mcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellIdentifier) GetMccOk() (*string, bool) {
	if o == nil || o.Mcc == nil {
		return nil, false
	}
	return o.Mcc, true
}

// HasMcc returns a boolean if a field has been set.
func (o *CellIdentifier) HasMcc() bool {
	if o != nil && o.Mcc != nil {
		return true
	}

	return false
}

// SetMcc gets a reference to the given string and assigns it to the Mcc field.
func (o *CellIdentifier) SetMcc(v string) {
	o.Mcc = &v
}

// GetMnc returns the Mnc field value if set, zero value otherwise.
func (o *CellIdentifier) GetMnc() string {
	if o == nil || o.Mnc == nil {
		var ret string
		return ret
	}
	return *o.Mnc
}

// GetMncOk returns a tuple with the Mnc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellIdentifier) GetMncOk() (*string, bool) {
	if o == nil || o.Mnc == nil {
		return nil, false
	}
	return o.Mnc, true
}

// HasMnc returns a boolean if a field has been set.
func (o *CellIdentifier) HasMnc() bool {
	if o != nil && o.Mnc != nil {
		return true
	}

	return false
}

// SetMnc gets a reference to the given string and assigns it to the Mnc field.
func (o *CellIdentifier) SetMnc(v string) {
	o.Mnc = &v
}

// GetTac returns the Tac field value if set, zero value otherwise.
func (o *CellIdentifier) GetTac() string {
	if o == nil || o.Tac == nil {
		var ret string
		return ret
	}
	return *o.Tac
}

// GetTacOk returns a tuple with the Tac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellIdentifier) GetTacOk() (*string, bool) {
	if o == nil || o.Tac == nil {
		return nil, false
	}
	return o.Tac, true
}

// HasTac returns a boolean if a field has been set.
func (o *CellIdentifier) HasTac() bool {
	if o != nil && o.Tac != nil {
		return true
	}

	return false
}

// SetTac gets a reference to the given string and assigns it to the Tac field.
func (o *CellIdentifier) SetTac(v string) {
	o.Tac = &v
}

func (o CellIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cid != nil {
		toSerialize["cid"] = o.Cid
	}
	if o.Eci != nil {
		toSerialize["eci"] = o.Eci
	}
	if o.Ecid != nil {
		toSerialize["ecid"] = o.Ecid
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	if o.Lac != nil {
		toSerialize["lac"] = o.Lac
	}
	if o.Mcc != nil {
		toSerialize["mcc"] = o.Mcc
	}
	if o.Mnc != nil {
		toSerialize["mnc"] = o.Mnc
	}
	if o.Tac != nil {
		toSerialize["tac"] = o.Tac
	}
	return json.Marshal(toSerialize)
}

type NullableCellIdentifier struct {
	value *CellIdentifier
	isSet bool
}

func (v NullableCellIdentifier) Get() *CellIdentifier {
	return v.value
}

func (v *NullableCellIdentifier) Set(val *CellIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableCellIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableCellIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCellIdentifier(val *CellIdentifier) *NullableCellIdentifier {
	return &NullableCellIdentifier{value: val, isSet: true}
}

func (v NullableCellIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCellIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


