/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// CellLocation struct for CellLocation
type CellLocation struct {
	// Average signal strength from all observations for the cell network. This is an integer value, in dBm.
	AvgStrength *int32 `json:"avg_strength,omitempty"`
	// Timestamp of the time when this record was first created.
	Created *time.Time `json:"created,omitempty"`
	// Whether or not this cell is a position estimate based on observations subject to change in the future (`0`) or an exact location entered from a knowledgeable source (`1`).
	Exact *int32 `json:"exact,omitempty"`
	// Latitude
	Lat *float64 `json:"lat,omitempty"`
	// Longitude
	Lon *float64 `json:"lon,omitempty"`
	// Estimate of radio range, in meters. This is an estimate on how large each cell area is, as a radius around the estimated position and is based on the observations or a knowledgeable source.
	Range *int32 `json:"range,omitempty"`
	// Total number of observations used to calculate the estimated position, range and avg_strength.
	Samples *int32 `json:"samples,omitempty"`
	// Timestamp of the time when this record was most recently modified.
	Updated *time.Time `json:"updated,omitempty"`
}

// NewCellLocation instantiates a new CellLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCellLocation() *CellLocation {
	this := CellLocation{}
	return &this
}

// NewCellLocationWithDefaults instantiates a new CellLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCellLocationWithDefaults() *CellLocation {
	this := CellLocation{}
	return &this
}

// GetAvgStrength returns the AvgStrength field value if set, zero value otherwise.
func (o *CellLocation) GetAvgStrength() int32 {
	if o == nil || o.AvgStrength == nil {
		var ret int32
		return ret
	}
	return *o.AvgStrength
}

// GetAvgStrengthOk returns a tuple with the AvgStrength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellLocation) GetAvgStrengthOk() (*int32, bool) {
	if o == nil || o.AvgStrength == nil {
		return nil, false
	}
	return o.AvgStrength, true
}

// HasAvgStrength returns a boolean if a field has been set.
func (o *CellLocation) HasAvgStrength() bool {
	if o != nil && o.AvgStrength != nil {
		return true
	}

	return false
}

// SetAvgStrength gets a reference to the given int32 and assigns it to the AvgStrength field.
func (o *CellLocation) SetAvgStrength(v int32) {
	o.AvgStrength = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *CellLocation) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellLocation) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *CellLocation) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *CellLocation) SetCreated(v time.Time) {
	o.Created = &v
}

// GetExact returns the Exact field value if set, zero value otherwise.
func (o *CellLocation) GetExact() int32 {
	if o == nil || o.Exact == nil {
		var ret int32
		return ret
	}
	return *o.Exact
}

// GetExactOk returns a tuple with the Exact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellLocation) GetExactOk() (*int32, bool) {
	if o == nil || o.Exact == nil {
		return nil, false
	}
	return o.Exact, true
}

// HasExact returns a boolean if a field has been set.
func (o *CellLocation) HasExact() bool {
	if o != nil && o.Exact != nil {
		return true
	}

	return false
}

// SetExact gets a reference to the given int32 and assigns it to the Exact field.
func (o *CellLocation) SetExact(v int32) {
	o.Exact = &v
}

// GetLat returns the Lat field value if set, zero value otherwise.
func (o *CellLocation) GetLat() float64 {
	if o == nil || o.Lat == nil {
		var ret float64
		return ret
	}
	return *o.Lat
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellLocation) GetLatOk() (*float64, bool) {
	if o == nil || o.Lat == nil {
		return nil, false
	}
	return o.Lat, true
}

// HasLat returns a boolean if a field has been set.
func (o *CellLocation) HasLat() bool {
	if o != nil && o.Lat != nil {
		return true
	}

	return false
}

// SetLat gets a reference to the given float64 and assigns it to the Lat field.
func (o *CellLocation) SetLat(v float64) {
	o.Lat = &v
}

// GetLon returns the Lon field value if set, zero value otherwise.
func (o *CellLocation) GetLon() float64 {
	if o == nil || o.Lon == nil {
		var ret float64
		return ret
	}
	return *o.Lon
}

// GetLonOk returns a tuple with the Lon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellLocation) GetLonOk() (*float64, bool) {
	if o == nil || o.Lon == nil {
		return nil, false
	}
	return o.Lon, true
}

// HasLon returns a boolean if a field has been set.
func (o *CellLocation) HasLon() bool {
	if o != nil && o.Lon != nil {
		return true
	}

	return false
}

// SetLon gets a reference to the given float64 and assigns it to the Lon field.
func (o *CellLocation) SetLon(v float64) {
	o.Lon = &v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *CellLocation) GetRange() int32 {
	if o == nil || o.Range == nil {
		var ret int32
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellLocation) GetRangeOk() (*int32, bool) {
	if o == nil || o.Range == nil {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *CellLocation) HasRange() bool {
	if o != nil && o.Range != nil {
		return true
	}

	return false
}

// SetRange gets a reference to the given int32 and assigns it to the Range field.
func (o *CellLocation) SetRange(v int32) {
	o.Range = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *CellLocation) GetSamples() int32 {
	if o == nil || o.Samples == nil {
		var ret int32
		return ret
	}
	return *o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellLocation) GetSamplesOk() (*int32, bool) {
	if o == nil || o.Samples == nil {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *CellLocation) HasSamples() bool {
	if o != nil && o.Samples != nil {
		return true
	}

	return false
}

// SetSamples gets a reference to the given int32 and assigns it to the Samples field.
func (o *CellLocation) SetSamples(v int32) {
	o.Samples = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *CellLocation) GetUpdated() time.Time {
	if o == nil || o.Updated == nil {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CellLocation) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *CellLocation) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *CellLocation) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o CellLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AvgStrength != nil {
		toSerialize["avg_strength"] = o.AvgStrength
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Exact != nil {
		toSerialize["exact"] = o.Exact
	}
	if o.Lat != nil {
		toSerialize["lat"] = o.Lat
	}
	if o.Lon != nil {
		toSerialize["lon"] = o.Lon
	}
	if o.Range != nil {
		toSerialize["range"] = o.Range
	}
	if o.Samples != nil {
		toSerialize["samples"] = o.Samples
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableCellLocation struct {
	value *CellLocation
	isSet bool
}

func (v NullableCellLocation) Get() *CellLocation {
	return v.value
}

func (v *NullableCellLocation) Set(val *CellLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableCellLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableCellLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCellLocation(val *CellLocation) *NullableCellLocation {
	return &NullableCellLocation{value: val, isSet: true}
}

func (v NullableCellLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCellLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


