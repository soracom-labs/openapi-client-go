/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// DiagnosticResponse struct for DiagnosticResponse
type DiagnosticResponse struct {
	DiagnosticId *string `json:"diagnosticId,omitempty"`
	// Start time for diagnostic (unixtime milliseconds)
	From *int64 `json:"from,omitempty"`
	Insights []map[string]Insight `json:"insights,omitempty"`
	// resourceId according to resourceType
	ResourceId *string `json:"resourceId,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
	Service *string `json:"service,omitempty"`
	Status *string `json:"status,omitempty"`
	// End time for diagnostic (unixtime milliseconds)
	To *int64 `json:"to,omitempty"`
}

// NewDiagnosticResponse instantiates a new DiagnosticResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiagnosticResponse() *DiagnosticResponse {
	this := DiagnosticResponse{}
	return &this
}

// NewDiagnosticResponseWithDefaults instantiates a new DiagnosticResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiagnosticResponseWithDefaults() *DiagnosticResponse {
	this := DiagnosticResponse{}
	return &this
}

// GetDiagnosticId returns the DiagnosticId field value if set, zero value otherwise.
func (o *DiagnosticResponse) GetDiagnosticId() string {
	if o == nil || o.DiagnosticId == nil {
		var ret string
		return ret
	}
	return *o.DiagnosticId
}

// GetDiagnosticIdOk returns a tuple with the DiagnosticId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticResponse) GetDiagnosticIdOk() (*string, bool) {
	if o == nil || o.DiagnosticId == nil {
		return nil, false
	}
	return o.DiagnosticId, true
}

// HasDiagnosticId returns a boolean if a field has been set.
func (o *DiagnosticResponse) HasDiagnosticId() bool {
	if o != nil && o.DiagnosticId != nil {
		return true
	}

	return false
}

// SetDiagnosticId gets a reference to the given string and assigns it to the DiagnosticId field.
func (o *DiagnosticResponse) SetDiagnosticId(v string) {
	o.DiagnosticId = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *DiagnosticResponse) GetFrom() int64 {
	if o == nil || o.From == nil {
		var ret int64
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticResponse) GetFromOk() (*int64, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *DiagnosticResponse) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given int64 and assigns it to the From field.
func (o *DiagnosticResponse) SetFrom(v int64) {
	o.From = &v
}

// GetInsights returns the Insights field value if set, zero value otherwise.
func (o *DiagnosticResponse) GetInsights() []map[string]Insight {
	if o == nil || o.Insights == nil {
		var ret []map[string]Insight
		return ret
	}
	return o.Insights
}

// GetInsightsOk returns a tuple with the Insights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticResponse) GetInsightsOk() ([]map[string]Insight, bool) {
	if o == nil || o.Insights == nil {
		return nil, false
	}
	return o.Insights, true
}

// HasInsights returns a boolean if a field has been set.
func (o *DiagnosticResponse) HasInsights() bool {
	if o != nil && o.Insights != nil {
		return true
	}

	return false
}

// SetInsights gets a reference to the given []map[string]Insight and assigns it to the Insights field.
func (o *DiagnosticResponse) SetInsights(v []map[string]Insight) {
	o.Insights = v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *DiagnosticResponse) GetResourceId() string {
	if o == nil || o.ResourceId == nil {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticResponse) GetResourceIdOk() (*string, bool) {
	if o == nil || o.ResourceId == nil {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *DiagnosticResponse) HasResourceId() bool {
	if o != nil && o.ResourceId != nil {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *DiagnosticResponse) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *DiagnosticResponse) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticResponse) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *DiagnosticResponse) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *DiagnosticResponse) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *DiagnosticResponse) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticResponse) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *DiagnosticResponse) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *DiagnosticResponse) SetService(v string) {
	o.Service = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DiagnosticResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticResponse) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DiagnosticResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DiagnosticResponse) SetStatus(v string) {
	o.Status = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *DiagnosticResponse) GetTo() int64 {
	if o == nil || o.To == nil {
		var ret int64
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticResponse) GetToOk() (*int64, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *DiagnosticResponse) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given int64 and assigns it to the To field.
func (o *DiagnosticResponse) SetTo(v int64) {
	o.To = &v
}

func (o DiagnosticResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiagnosticId != nil {
		toSerialize["diagnosticId"] = o.DiagnosticId
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.Insights != nil {
		toSerialize["insights"] = o.Insights
	}
	if o.ResourceId != nil {
		toSerialize["resourceId"] = o.ResourceId
	}
	if o.ResourceType != nil {
		toSerialize["resourceType"] = o.ResourceType
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	return json.Marshal(toSerialize)
}

type NullableDiagnosticResponse struct {
	value *DiagnosticResponse
	isSet bool
}

func (v NullableDiagnosticResponse) Get() *DiagnosticResponse {
	return v.value
}

func (v *NullableDiagnosticResponse) Set(val *DiagnosticResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagnosticResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagnosticResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagnosticResponse(val *DiagnosticResponse) *NullableDiagnosticResponse {
	return &NullableDiagnosticResponse{value: val, isSet: true}
}

func (v NullableDiagnosticResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagnosticResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


