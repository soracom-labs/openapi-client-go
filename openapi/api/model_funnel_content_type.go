/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// FunnelContentType the model 'FunnelContentType'
type FunnelContentType string

// List of FunnelContentType
const (
	JSON FunnelContentType = "json"
	TEXT FunnelContentType = "text"
	UNSPECIFIED FunnelContentType = "unspecified"
	BINARY FunnelContentType = "binary"
	APPLICATION_X_SORACOM_BF_V1 FunnelContentType = "application/x-soracom-bf-v1"
)

// All allowed values of FunnelContentType enum
var AllowedFunnelContentTypeEnumValues = []FunnelContentType{
	"json",
	"text",
	"unspecified",
	"binary",
	"application/x-soracom-bf-v1",
}

func (v *FunnelContentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FunnelContentType(value)
	for _, existing := range AllowedFunnelContentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FunnelContentType", value)
}

// NewFunnelContentTypeFromValue returns a pointer to a valid FunnelContentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFunnelContentTypeFromValue(v string) (*FunnelContentType, error) {
	ev := FunnelContentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FunnelContentType: valid values are %v", v, AllowedFunnelContentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FunnelContentType) IsValid() bool {
	for _, existing := range AllowedFunnelContentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FunnelContentType value
func (v FunnelContentType) Ptr() *FunnelContentType {
	return &v
}

type NullableFunnelContentType struct {
	value *FunnelContentType
	isSet bool
}

func (v NullableFunnelContentType) Get() *FunnelContentType {
	return v.value
}

func (v *NullableFunnelContentType) Set(val *FunnelContentType) {
	v.value = val
	v.isSet = true
}

func (v NullableFunnelContentType) IsSet() bool {
	return v.isSet
}

func (v *NullableFunnelContentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunnelContentType(val *FunnelContentType) *NullableFunnelContentType {
	return &NullableFunnelContentType{value: val, isSet: true}
}

func (v NullableFunnelContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunnelContentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

