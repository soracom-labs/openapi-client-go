/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// IpAddressMapEntry struct for IpAddressMapEntry
type IpAddressMapEntry struct {
	IpAddress *string `json:"ipAddress,omitempty"`
	Key *string `json:"key,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewIpAddressMapEntry instantiates a new IpAddressMapEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpAddressMapEntry() *IpAddressMapEntry {
	this := IpAddressMapEntry{}
	return &this
}

// NewIpAddressMapEntryWithDefaults instantiates a new IpAddressMapEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpAddressMapEntryWithDefaults() *IpAddressMapEntry {
	this := IpAddressMapEntry{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *IpAddressMapEntry) GetIpAddress() string {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddressMapEntry) GetIpAddressOk() (*string, bool) {
	if o == nil || o.IpAddress == nil {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *IpAddressMapEntry) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *IpAddressMapEntry) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *IpAddressMapEntry) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddressMapEntry) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *IpAddressMapEntry) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *IpAddressMapEntry) SetKey(v string) {
	o.Key = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IpAddressMapEntry) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddressMapEntry) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IpAddressMapEntry) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IpAddressMapEntry) SetType(v string) {
	o.Type = &v
}

func (o IpAddressMapEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpAddress != nil {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableIpAddressMapEntry struct {
	value *IpAddressMapEntry
	isSet bool
}

func (v NullableIpAddressMapEntry) Get() *IpAddressMapEntry {
	return v.value
}

func (v *NullableIpAddressMapEntry) Set(val *IpAddressMapEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableIpAddressMapEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableIpAddressMapEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpAddressMapEntry(val *IpAddressMapEntry) *NullableIpAddressMapEntry {
	return &NullableIpAddressMapEntry{value: val, isSet: true}
}

func (v NullableIpAddressMapEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpAddressMapEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


