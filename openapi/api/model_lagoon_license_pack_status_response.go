/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// LagoonLicensePackStatusResponse struct for LagoonLicensePackStatusResponse
type LagoonLicensePackStatusResponse struct {
	LicensePackName *string `json:"licensePackName,omitempty"`
	Quantity *int32 `json:"quantity,omitempty"`
}

// NewLagoonLicensePackStatusResponse instantiates a new LagoonLicensePackStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLagoonLicensePackStatusResponse() *LagoonLicensePackStatusResponse {
	this := LagoonLicensePackStatusResponse{}
	return &this
}

// NewLagoonLicensePackStatusResponseWithDefaults instantiates a new LagoonLicensePackStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLagoonLicensePackStatusResponseWithDefaults() *LagoonLicensePackStatusResponse {
	this := LagoonLicensePackStatusResponse{}
	return &this
}

// GetLicensePackName returns the LicensePackName field value if set, zero value otherwise.
func (o *LagoonLicensePackStatusResponse) GetLicensePackName() string {
	if o == nil || o.LicensePackName == nil {
		var ret string
		return ret
	}
	return *o.LicensePackName
}

// GetLicensePackNameOk returns a tuple with the LicensePackName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LagoonLicensePackStatusResponse) GetLicensePackNameOk() (*string, bool) {
	if o == nil || o.LicensePackName == nil {
		return nil, false
	}
	return o.LicensePackName, true
}

// HasLicensePackName returns a boolean if a field has been set.
func (o *LagoonLicensePackStatusResponse) HasLicensePackName() bool {
	if o != nil && o.LicensePackName != nil {
		return true
	}

	return false
}

// SetLicensePackName gets a reference to the given string and assigns it to the LicensePackName field.
func (o *LagoonLicensePackStatusResponse) SetLicensePackName(v string) {
	o.LicensePackName = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *LagoonLicensePackStatusResponse) GetQuantity() int32 {
	if o == nil || o.Quantity == nil {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LagoonLicensePackStatusResponse) GetQuantityOk() (*int32, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *LagoonLicensePackStatusResponse) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *LagoonLicensePackStatusResponse) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o LagoonLicensePackStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LicensePackName != nil {
		toSerialize["licensePackName"] = o.LicensePackName
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	return json.Marshal(toSerialize)
}

type NullableLagoonLicensePackStatusResponse struct {
	value *LagoonLicensePackStatusResponse
	isSet bool
}

func (v NullableLagoonLicensePackStatusResponse) Get() *LagoonLicensePackStatusResponse {
	return v.value
}

func (v *NullableLagoonLicensePackStatusResponse) Set(val *LagoonLicensePackStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLagoonLicensePackStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLagoonLicensePackStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLagoonLicensePackStatusResponse(val *LagoonLicensePackStatusResponse) *NullableLagoonLicensePackStatusResponse {
	return &NullableLagoonLicensePackStatusResponse{value: val, isSet: true}
}

func (v NullableLagoonLicensePackStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLagoonLicensePackStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


