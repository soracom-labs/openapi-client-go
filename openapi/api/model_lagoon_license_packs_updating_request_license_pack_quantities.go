/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// LagoonLicensePacksUpdatingRequestLicensePackQuantities struct for LagoonLicensePacksUpdatingRequestLicensePackQuantities
type LagoonLicensePacksUpdatingRequestLicensePackQuantities struct {
	DesiredQuantity *int32 `json:"desiredQuantity,omitempty"`
	LicensePackName *string `json:"licensePackName,omitempty"`
}

// NewLagoonLicensePacksUpdatingRequestLicensePackQuantities instantiates a new LagoonLicensePacksUpdatingRequestLicensePackQuantities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLagoonLicensePacksUpdatingRequestLicensePackQuantities() *LagoonLicensePacksUpdatingRequestLicensePackQuantities {
	this := LagoonLicensePacksUpdatingRequestLicensePackQuantities{}
	return &this
}

// NewLagoonLicensePacksUpdatingRequestLicensePackQuantitiesWithDefaults instantiates a new LagoonLicensePacksUpdatingRequestLicensePackQuantities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLagoonLicensePacksUpdatingRequestLicensePackQuantitiesWithDefaults() *LagoonLicensePacksUpdatingRequestLicensePackQuantities {
	this := LagoonLicensePacksUpdatingRequestLicensePackQuantities{}
	return &this
}

// GetDesiredQuantity returns the DesiredQuantity field value if set, zero value otherwise.
func (o *LagoonLicensePacksUpdatingRequestLicensePackQuantities) GetDesiredQuantity() int32 {
	if o == nil || o.DesiredQuantity == nil {
		var ret int32
		return ret
	}
	return *o.DesiredQuantity
}

// GetDesiredQuantityOk returns a tuple with the DesiredQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LagoonLicensePacksUpdatingRequestLicensePackQuantities) GetDesiredQuantityOk() (*int32, bool) {
	if o == nil || o.DesiredQuantity == nil {
		return nil, false
	}
	return o.DesiredQuantity, true
}

// HasDesiredQuantity returns a boolean if a field has been set.
func (o *LagoonLicensePacksUpdatingRequestLicensePackQuantities) HasDesiredQuantity() bool {
	if o != nil && o.DesiredQuantity != nil {
		return true
	}

	return false
}

// SetDesiredQuantity gets a reference to the given int32 and assigns it to the DesiredQuantity field.
func (o *LagoonLicensePacksUpdatingRequestLicensePackQuantities) SetDesiredQuantity(v int32) {
	o.DesiredQuantity = &v
}

// GetLicensePackName returns the LicensePackName field value if set, zero value otherwise.
func (o *LagoonLicensePacksUpdatingRequestLicensePackQuantities) GetLicensePackName() string {
	if o == nil || o.LicensePackName == nil {
		var ret string
		return ret
	}
	return *o.LicensePackName
}

// GetLicensePackNameOk returns a tuple with the LicensePackName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LagoonLicensePacksUpdatingRequestLicensePackQuantities) GetLicensePackNameOk() (*string, bool) {
	if o == nil || o.LicensePackName == nil {
		return nil, false
	}
	return o.LicensePackName, true
}

// HasLicensePackName returns a boolean if a field has been set.
func (o *LagoonLicensePacksUpdatingRequestLicensePackQuantities) HasLicensePackName() bool {
	if o != nil && o.LicensePackName != nil {
		return true
	}

	return false
}

// SetLicensePackName gets a reference to the given string and assigns it to the LicensePackName field.
func (o *LagoonLicensePacksUpdatingRequestLicensePackQuantities) SetLicensePackName(v string) {
	o.LicensePackName = &v
}

func (o LagoonLicensePacksUpdatingRequestLicensePackQuantities) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DesiredQuantity != nil {
		toSerialize["desiredQuantity"] = o.DesiredQuantity
	}
	if o.LicensePackName != nil {
		toSerialize["licensePackName"] = o.LicensePackName
	}
	return json.Marshal(toSerialize)
}

type NullableLagoonLicensePacksUpdatingRequestLicensePackQuantities struct {
	value *LagoonLicensePacksUpdatingRequestLicensePackQuantities
	isSet bool
}

func (v NullableLagoonLicensePacksUpdatingRequestLicensePackQuantities) Get() *LagoonLicensePacksUpdatingRequestLicensePackQuantities {
	return v.value
}

func (v *NullableLagoonLicensePacksUpdatingRequestLicensePackQuantities) Set(val *LagoonLicensePacksUpdatingRequestLicensePackQuantities) {
	v.value = val
	v.isSet = true
}

func (v NullableLagoonLicensePacksUpdatingRequestLicensePackQuantities) IsSet() bool {
	return v.isSet
}

func (v *NullableLagoonLicensePacksUpdatingRequestLicensePackQuantities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLagoonLicensePacksUpdatingRequestLicensePackQuantities(val *LagoonLicensePacksUpdatingRequestLicensePackQuantities) *NullableLagoonLicensePacksUpdatingRequestLicensePackQuantities {
	return &NullableLagoonLicensePacksUpdatingRequestLicensePackQuantities{value: val, isSet: true}
}

func (v NullableLagoonLicensePacksUpdatingRequestLicensePackQuantities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLagoonLicensePacksUpdatingRequestLicensePackQuantities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


