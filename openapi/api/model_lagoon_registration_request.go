/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// LagoonRegistrationRequest struct for LagoonRegistrationRequest
type LagoonRegistrationRequest struct {
	Plan *string `json:"plan,omitempty"`
	// This password is used by the initial user's login.
	UserPassword *string `json:"userPassword,omitempty"`
}

// NewLagoonRegistrationRequest instantiates a new LagoonRegistrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLagoonRegistrationRequest() *LagoonRegistrationRequest {
	this := LagoonRegistrationRequest{}
	return &this
}

// NewLagoonRegistrationRequestWithDefaults instantiates a new LagoonRegistrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLagoonRegistrationRequestWithDefaults() *LagoonRegistrationRequest {
	this := LagoonRegistrationRequest{}
	return &this
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *LagoonRegistrationRequest) GetPlan() string {
	if o == nil || o.Plan == nil {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LagoonRegistrationRequest) GetPlanOk() (*string, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *LagoonRegistrationRequest) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *LagoonRegistrationRequest) SetPlan(v string) {
	o.Plan = &v
}

// GetUserPassword returns the UserPassword field value if set, zero value otherwise.
func (o *LagoonRegistrationRequest) GetUserPassword() string {
	if o == nil || o.UserPassword == nil {
		var ret string
		return ret
	}
	return *o.UserPassword
}

// GetUserPasswordOk returns a tuple with the UserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LagoonRegistrationRequest) GetUserPasswordOk() (*string, bool) {
	if o == nil || o.UserPassword == nil {
		return nil, false
	}
	return o.UserPassword, true
}

// HasUserPassword returns a boolean if a field has been set.
func (o *LagoonRegistrationRequest) HasUserPassword() bool {
	if o != nil && o.UserPassword != nil {
		return true
	}

	return false
}

// SetUserPassword gets a reference to the given string and assigns it to the UserPassword field.
func (o *LagoonRegistrationRequest) SetUserPassword(v string) {
	o.UserPassword = &v
}

func (o LagoonRegistrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	if o.UserPassword != nil {
		toSerialize["userPassword"] = o.UserPassword
	}
	return json.Marshal(toSerialize)
}

type NullableLagoonRegistrationRequest struct {
	value *LagoonRegistrationRequest
	isSet bool
}

func (v NullableLagoonRegistrationRequest) Get() *LagoonRegistrationRequest {
	return v.value
}

func (v *NullableLagoonRegistrationRequest) Set(val *LagoonRegistrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLagoonRegistrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLagoonRegistrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLagoonRegistrationRequest(val *LagoonRegistrationRequest) *NullableLagoonRegistrationRequest {
	return &NullableLagoonRegistrationRequest{value: val, isSet: true}
}

func (v NullableLagoonRegistrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLagoonRegistrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


