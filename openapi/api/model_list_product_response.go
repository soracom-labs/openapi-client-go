/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ListProductResponse struct for ListProductResponse
type ListProductResponse struct {
	ProductList []ProductModel `json:"productList,omitempty"`
	ShippingCostList []ShippingCostModel `json:"shippingCostList,omitempty"`
}

// NewListProductResponse instantiates a new ListProductResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListProductResponse() *ListProductResponse {
	this := ListProductResponse{}
	return &this
}

// NewListProductResponseWithDefaults instantiates a new ListProductResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListProductResponseWithDefaults() *ListProductResponse {
	this := ListProductResponse{}
	return &this
}

// GetProductList returns the ProductList field value if set, zero value otherwise.
func (o *ListProductResponse) GetProductList() []ProductModel {
	if o == nil || o.ProductList == nil {
		var ret []ProductModel
		return ret
	}
	return o.ProductList
}

// GetProductListOk returns a tuple with the ProductList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductResponse) GetProductListOk() ([]ProductModel, bool) {
	if o == nil || o.ProductList == nil {
		return nil, false
	}
	return o.ProductList, true
}

// HasProductList returns a boolean if a field has been set.
func (o *ListProductResponse) HasProductList() bool {
	if o != nil && o.ProductList != nil {
		return true
	}

	return false
}

// SetProductList gets a reference to the given []ProductModel and assigns it to the ProductList field.
func (o *ListProductResponse) SetProductList(v []ProductModel) {
	o.ProductList = v
}

// GetShippingCostList returns the ShippingCostList field value if set, zero value otherwise.
func (o *ListProductResponse) GetShippingCostList() []ShippingCostModel {
	if o == nil || o.ShippingCostList == nil {
		var ret []ShippingCostModel
		return ret
	}
	return o.ShippingCostList
}

// GetShippingCostListOk returns a tuple with the ShippingCostList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductResponse) GetShippingCostListOk() ([]ShippingCostModel, bool) {
	if o == nil || o.ShippingCostList == nil {
		return nil, false
	}
	return o.ShippingCostList, true
}

// HasShippingCostList returns a boolean if a field has been set.
func (o *ListProductResponse) HasShippingCostList() bool {
	if o != nil && o.ShippingCostList != nil {
		return true
	}

	return false
}

// SetShippingCostList gets a reference to the given []ShippingCostModel and assigns it to the ShippingCostList field.
func (o *ListProductResponse) SetShippingCostList(v []ShippingCostModel) {
	o.ShippingCostList = v
}

func (o ListProductResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProductList != nil {
		toSerialize["productList"] = o.ProductList
	}
	if o.ShippingCostList != nil {
		toSerialize["shippingCostList"] = o.ShippingCostList
	}
	return json.Marshal(toSerialize)
}

type NullableListProductResponse struct {
	value *ListProductResponse
	isSet bool
}

func (v NullableListProductResponse) Get() *ListProductResponse {
	return v.value
}

func (v *NullableListProductResponse) Set(val *ListProductResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListProductResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListProductResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListProductResponse(val *ListProductResponse) *NullableListProductResponse {
	return &NullableListProductResponse{value: val, isSet: true}
}

func (v NullableListProductResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListProductResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


