/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// LoraData struct for LoraData
type LoraData struct {
	Data *string `json:"data,omitempty"`
	FPort *int32 `json:"fPort,omitempty"`
}

// NewLoraData instantiates a new LoraData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoraData() *LoraData {
	this := LoraData{}
	var fPort int32 = 2
	this.FPort = &fPort
	return &this
}

// NewLoraDataWithDefaults instantiates a new LoraData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoraDataWithDefaults() *LoraData {
	this := LoraData{}
	var fPort int32 = 2
	this.FPort = &fPort
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *LoraData) GetData() string {
	if o == nil || o.Data == nil {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoraData) GetDataOk() (*string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *LoraData) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *LoraData) SetData(v string) {
	o.Data = &v
}

// GetFPort returns the FPort field value if set, zero value otherwise.
func (o *LoraData) GetFPort() int32 {
	if o == nil || o.FPort == nil {
		var ret int32
		return ret
	}
	return *o.FPort
}

// GetFPortOk returns a tuple with the FPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoraData) GetFPortOk() (*int32, bool) {
	if o == nil || o.FPort == nil {
		return nil, false
	}
	return o.FPort, true
}

// HasFPort returns a boolean if a field has been set.
func (o *LoraData) HasFPort() bool {
	if o != nil && o.FPort != nil {
		return true
	}

	return false
}

// SetFPort gets a reference to the given int32 and assigns it to the FPort field.
func (o *LoraData) SetFPort(v int32) {
	o.FPort = &v
}

func (o LoraData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.FPort != nil {
		toSerialize["fPort"] = o.FPort
	}
	return json.Marshal(toSerialize)
}

type NullableLoraData struct {
	value *LoraData
	isSet bool
}

func (v NullableLoraData) Get() *LoraData {
	return v.value
}

func (v *NullableLoraData) Set(val *LoraData) {
	v.value = val
	v.isSet = true
}

func (v NullableLoraData) IsSet() bool {
	return v.isSet
}

func (v *NullableLoraData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoraData(val *LoraData) *NullableLoraData {
	return &NullableLoraData{value: val, isSet: true}
}

func (v NullableLoraData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoraData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


