/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ObjectInstance struct for ObjectInstance
type ObjectInstance struct {
	Id *int32 `json:"id,omitempty"`
	Observed *bool `json:"observed,omitempty"`
	Resources *map[string]ResourceInstance `json:"resources,omitempty"`
}

// NewObjectInstance instantiates a new ObjectInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectInstance() *ObjectInstance {
	this := ObjectInstance{}
	var observed bool = false
	this.Observed = &observed
	return &this
}

// NewObjectInstanceWithDefaults instantiates a new ObjectInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectInstanceWithDefaults() *ObjectInstance {
	this := ObjectInstance{}
	var observed bool = false
	this.Observed = &observed
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObjectInstance) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectInstance) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObjectInstance) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ObjectInstance) SetId(v int32) {
	o.Id = &v
}

// GetObserved returns the Observed field value if set, zero value otherwise.
func (o *ObjectInstance) GetObserved() bool {
	if o == nil || o.Observed == nil {
		var ret bool
		return ret
	}
	return *o.Observed
}

// GetObservedOk returns a tuple with the Observed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectInstance) GetObservedOk() (*bool, bool) {
	if o == nil || o.Observed == nil {
		return nil, false
	}
	return o.Observed, true
}

// HasObserved returns a boolean if a field has been set.
func (o *ObjectInstance) HasObserved() bool {
	if o != nil && o.Observed != nil {
		return true
	}

	return false
}

// SetObserved gets a reference to the given bool and assigns it to the Observed field.
func (o *ObjectInstance) SetObserved(v bool) {
	o.Observed = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *ObjectInstance) GetResources() map[string]ResourceInstance {
	if o == nil || o.Resources == nil {
		var ret map[string]ResourceInstance
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectInstance) GetResourcesOk() (*map[string]ResourceInstance, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *ObjectInstance) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given map[string]ResourceInstance and assigns it to the Resources field.
func (o *ObjectInstance) SetResources(v map[string]ResourceInstance) {
	o.Resources = &v
}

func (o ObjectInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Observed != nil {
		toSerialize["observed"] = o.Observed
	}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableObjectInstance struct {
	value *ObjectInstance
	isSet bool
}

func (v NullableObjectInstance) Get() *ObjectInstance {
	return v.value
}

func (v *NullableObjectInstance) Set(val *ObjectInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectInstance(val *ObjectInstance) *NullableObjectInstance {
	return &NullableObjectInstance{value: val, isSet: true}
}

func (v NullableObjectInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


