/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// OpenGateRequest struct for OpenGateRequest
type OpenGateRequest struct {
	PrivacySeparatorEnabled *bool `json:"privacySeparatorEnabled,omitempty"`
	VxlanId *int32 `json:"vxlanId,omitempty"`
}

// NewOpenGateRequest instantiates a new OpenGateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenGateRequest() *OpenGateRequest {
	this := OpenGateRequest{}
	var privacySeparatorEnabled bool = false
	this.PrivacySeparatorEnabled = &privacySeparatorEnabled
	var vxlanId int32 = 10
	this.VxlanId = &vxlanId
	return &this
}

// NewOpenGateRequestWithDefaults instantiates a new OpenGateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenGateRequestWithDefaults() *OpenGateRequest {
	this := OpenGateRequest{}
	var privacySeparatorEnabled bool = false
	this.PrivacySeparatorEnabled = &privacySeparatorEnabled
	var vxlanId int32 = 10
	this.VxlanId = &vxlanId
	return &this
}

// GetPrivacySeparatorEnabled returns the PrivacySeparatorEnabled field value if set, zero value otherwise.
func (o *OpenGateRequest) GetPrivacySeparatorEnabled() bool {
	if o == nil || o.PrivacySeparatorEnabled == nil {
		var ret bool
		return ret
	}
	return *o.PrivacySeparatorEnabled
}

// GetPrivacySeparatorEnabledOk returns a tuple with the PrivacySeparatorEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGateRequest) GetPrivacySeparatorEnabledOk() (*bool, bool) {
	if o == nil || o.PrivacySeparatorEnabled == nil {
		return nil, false
	}
	return o.PrivacySeparatorEnabled, true
}

// HasPrivacySeparatorEnabled returns a boolean if a field has been set.
func (o *OpenGateRequest) HasPrivacySeparatorEnabled() bool {
	if o != nil && o.PrivacySeparatorEnabled != nil {
		return true
	}

	return false
}

// SetPrivacySeparatorEnabled gets a reference to the given bool and assigns it to the PrivacySeparatorEnabled field.
func (o *OpenGateRequest) SetPrivacySeparatorEnabled(v bool) {
	o.PrivacySeparatorEnabled = &v
}

// GetVxlanId returns the VxlanId field value if set, zero value otherwise.
func (o *OpenGateRequest) GetVxlanId() int32 {
	if o == nil || o.VxlanId == nil {
		var ret int32
		return ret
	}
	return *o.VxlanId
}

// GetVxlanIdOk returns a tuple with the VxlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGateRequest) GetVxlanIdOk() (*int32, bool) {
	if o == nil || o.VxlanId == nil {
		return nil, false
	}
	return o.VxlanId, true
}

// HasVxlanId returns a boolean if a field has been set.
func (o *OpenGateRequest) HasVxlanId() bool {
	if o != nil && o.VxlanId != nil {
		return true
	}

	return false
}

// SetVxlanId gets a reference to the given int32 and assigns it to the VxlanId field.
func (o *OpenGateRequest) SetVxlanId(v int32) {
	o.VxlanId = &v
}

func (o OpenGateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PrivacySeparatorEnabled != nil {
		toSerialize["privacySeparatorEnabled"] = o.PrivacySeparatorEnabled
	}
	if o.VxlanId != nil {
		toSerialize["vxlanId"] = o.VxlanId
	}
	return json.Marshal(toSerialize)
}

type NullableOpenGateRequest struct {
	value *OpenGateRequest
	isSet bool
}

func (v NullableOpenGateRequest) Get() *OpenGateRequest {
	return v.value
}

func (v *NullableOpenGateRequest) Set(val *OpenGateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenGateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenGateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenGateRequest(val *OpenGateRequest) *NullableOpenGateRequest {
	return &NullableOpenGateRequest{value: val, isSet: true}
}

func (v NullableOpenGateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenGateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


