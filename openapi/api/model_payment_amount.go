/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PaymentAmount Payment amount
type PaymentAmount struct {
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

// NewPaymentAmount instantiates a new PaymentAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentAmount() *PaymentAmount {
	this := PaymentAmount{}
	return &this
}

// NewPaymentAmountWithDefaults instantiates a new PaymentAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentAmountWithDefaults() *PaymentAmount {
	this := PaymentAmount{}
	return &this
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise.
func (o *PaymentAmount) GetTaxAmount() float64 {
	if o == nil || o.TaxAmount == nil {
		var ret float64
		return ret
	}
	return *o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmount) GetTaxAmountOk() (*float64, bool) {
	if o == nil || o.TaxAmount == nil {
		return nil, false
	}
	return o.TaxAmount, true
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *PaymentAmount) HasTaxAmount() bool {
	if o != nil && o.TaxAmount != nil {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given float64 and assigns it to the TaxAmount field.
func (o *PaymentAmount) SetTaxAmount(v float64) {
	o.TaxAmount = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *PaymentAmount) GetTotalAmount() float64 {
	if o == nil || o.TotalAmount == nil {
		var ret float64
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmount) GetTotalAmountOk() (*float64, bool) {
	if o == nil || o.TotalAmount == nil {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *PaymentAmount) HasTotalAmount() bool {
	if o != nil && o.TotalAmount != nil {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given float64 and assigns it to the TotalAmount field.
func (o *PaymentAmount) SetTotalAmount(v float64) {
	o.TotalAmount = &v
}

func (o PaymentAmount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TaxAmount != nil {
		toSerialize["taxAmount"] = o.TaxAmount
	}
	if o.TotalAmount != nil {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentAmount struct {
	value *PaymentAmount
	isSet bool
}

func (v NullablePaymentAmount) Get() *PaymentAmount {
	return v.value
}

func (v *NullablePaymentAmount) Set(val *PaymentAmount) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentAmount) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentAmount(val *PaymentAmount) *NullablePaymentAmount {
	return &NullablePaymentAmount{value: val, isSet: true}
}

func (v NullablePaymentAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


