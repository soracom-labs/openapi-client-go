/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PortMappingSource struct for PortMappingSource
type PortMappingSource struct {
	// The range of IP addresses in CIDR notation which will be allowed to access the port mapping.
	IpRanges []string `json:"ipRanges,omitempty"`
}

// NewPortMappingSource instantiates a new PortMappingSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortMappingSource() *PortMappingSource {
	this := PortMappingSource{}
	return &this
}

// NewPortMappingSourceWithDefaults instantiates a new PortMappingSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortMappingSourceWithDefaults() *PortMappingSource {
	this := PortMappingSource{}
	return &this
}

// GetIpRanges returns the IpRanges field value if set, zero value otherwise.
func (o *PortMappingSource) GetIpRanges() []string {
	if o == nil || o.IpRanges == nil {
		var ret []string
		return ret
	}
	return o.IpRanges
}

// GetIpRangesOk returns a tuple with the IpRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortMappingSource) GetIpRangesOk() ([]string, bool) {
	if o == nil || o.IpRanges == nil {
		return nil, false
	}
	return o.IpRanges, true
}

// HasIpRanges returns a boolean if a field has been set.
func (o *PortMappingSource) HasIpRanges() bool {
	if o != nil && o.IpRanges != nil {
		return true
	}

	return false
}

// SetIpRanges gets a reference to the given []string and assigns it to the IpRanges field.
func (o *PortMappingSource) SetIpRanges(v []string) {
	o.IpRanges = v
}

func (o PortMappingSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpRanges != nil {
		toSerialize["ipRanges"] = o.IpRanges
	}
	return json.Marshal(toSerialize)
}

type NullablePortMappingSource struct {
	value *PortMappingSource
	isSet bool
}

func (v NullablePortMappingSource) Get() *PortMappingSource {
	return v.value
}

func (v *NullablePortMappingSource) Set(val *PortMappingSource) {
	v.value = val
	v.isSet = true
}

func (v NullablePortMappingSource) IsSet() bool {
	return v.isSet
}

func (v *NullablePortMappingSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortMappingSource(val *PortMappingSource) *NullablePortMappingSource {
	return &NullablePortMappingSource{value: val, isSet: true}
}

func (v NullablePortMappingSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortMappingSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


