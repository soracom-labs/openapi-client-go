/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ProductModel Product
type ProductModel struct {
	// Campaign code
	CampaignCode *string `json:"campaignCode,omitempty"`
	// Consignor ID
	ConsignorId *string `json:"consignorId,omitempty"`
	// Consignor name
	ConsignorName *string `json:"consignorName,omitempty"`
	// Count
	Count *float64 `json:"count,omitempty"`
	// Currency
	Currency *string `json:"currency,omitempty"`
	// Product Description
	Description *string `json:"description,omitempty"`
	// Max quantity
	MaxQuantity *int32 `json:"maxQuantity,omitempty"`
	// Price
	Price *float64 `json:"price,omitempty"`
	PriceByQuantityList []PriceByQuantity `json:"priceByQuantityList,omitempty"`
	// Product code
	ProductCode *string `json:"productCode,omitempty"`
	// URL of product page
	ProductInfoURL *string `json:"productInfoURL,omitempty"`
	// Product name
	ProductName *string `json:"productName,omitempty"`
	// Product type
	ProductType *string `json:"productType,omitempty"`
	// Properties
	Properties *map[string]string `json:"properties,omitempty"`
	// Regular price
	RegularPrice *float64 `json:"regularPrice,omitempty"`
	// Price
	TaxIncludedPrice *float64 `json:"taxIncludedPrice,omitempty"`
	// TaxIncluded regular price
	TaxIncludedRegularPrice *float64 `json:"taxIncludedRegularPrice,omitempty"`
}

// NewProductModel instantiates a new ProductModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductModel() *ProductModel {
	this := ProductModel{}
	return &this
}

// NewProductModelWithDefaults instantiates a new ProductModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductModelWithDefaults() *ProductModel {
	this := ProductModel{}
	return &this
}

// GetCampaignCode returns the CampaignCode field value if set, zero value otherwise.
func (o *ProductModel) GetCampaignCode() string {
	if o == nil || o.CampaignCode == nil {
		var ret string
		return ret
	}
	return *o.CampaignCode
}

// GetCampaignCodeOk returns a tuple with the CampaignCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetCampaignCodeOk() (*string, bool) {
	if o == nil || o.CampaignCode == nil {
		return nil, false
	}
	return o.CampaignCode, true
}

// HasCampaignCode returns a boolean if a field has been set.
func (o *ProductModel) HasCampaignCode() bool {
	if o != nil && o.CampaignCode != nil {
		return true
	}

	return false
}

// SetCampaignCode gets a reference to the given string and assigns it to the CampaignCode field.
func (o *ProductModel) SetCampaignCode(v string) {
	o.CampaignCode = &v
}

// GetConsignorId returns the ConsignorId field value if set, zero value otherwise.
func (o *ProductModel) GetConsignorId() string {
	if o == nil || o.ConsignorId == nil {
		var ret string
		return ret
	}
	return *o.ConsignorId
}

// GetConsignorIdOk returns a tuple with the ConsignorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetConsignorIdOk() (*string, bool) {
	if o == nil || o.ConsignorId == nil {
		return nil, false
	}
	return o.ConsignorId, true
}

// HasConsignorId returns a boolean if a field has been set.
func (o *ProductModel) HasConsignorId() bool {
	if o != nil && o.ConsignorId != nil {
		return true
	}

	return false
}

// SetConsignorId gets a reference to the given string and assigns it to the ConsignorId field.
func (o *ProductModel) SetConsignorId(v string) {
	o.ConsignorId = &v
}

// GetConsignorName returns the ConsignorName field value if set, zero value otherwise.
func (o *ProductModel) GetConsignorName() string {
	if o == nil || o.ConsignorName == nil {
		var ret string
		return ret
	}
	return *o.ConsignorName
}

// GetConsignorNameOk returns a tuple with the ConsignorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetConsignorNameOk() (*string, bool) {
	if o == nil || o.ConsignorName == nil {
		return nil, false
	}
	return o.ConsignorName, true
}

// HasConsignorName returns a boolean if a field has been set.
func (o *ProductModel) HasConsignorName() bool {
	if o != nil && o.ConsignorName != nil {
		return true
	}

	return false
}

// SetConsignorName gets a reference to the given string and assigns it to the ConsignorName field.
func (o *ProductModel) SetConsignorName(v string) {
	o.ConsignorName = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ProductModel) GetCount() float64 {
	if o == nil || o.Count == nil {
		var ret float64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetCountOk() (*float64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ProductModel) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given float64 and assigns it to the Count field.
func (o *ProductModel) SetCount(v float64) {
	o.Count = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ProductModel) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ProductModel) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *ProductModel) SetCurrency(v string) {
	o.Currency = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProductModel) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductModel) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProductModel) SetDescription(v string) {
	o.Description = &v
}

// GetMaxQuantity returns the MaxQuantity field value if set, zero value otherwise.
func (o *ProductModel) GetMaxQuantity() int32 {
	if o == nil || o.MaxQuantity == nil {
		var ret int32
		return ret
	}
	return *o.MaxQuantity
}

// GetMaxQuantityOk returns a tuple with the MaxQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetMaxQuantityOk() (*int32, bool) {
	if o == nil || o.MaxQuantity == nil {
		return nil, false
	}
	return o.MaxQuantity, true
}

// HasMaxQuantity returns a boolean if a field has been set.
func (o *ProductModel) HasMaxQuantity() bool {
	if o != nil && o.MaxQuantity != nil {
		return true
	}

	return false
}

// SetMaxQuantity gets a reference to the given int32 and assigns it to the MaxQuantity field.
func (o *ProductModel) SetMaxQuantity(v int32) {
	o.MaxQuantity = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ProductModel) GetPrice() float64 {
	if o == nil || o.Price == nil {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetPriceOk() (*float64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ProductModel) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *ProductModel) SetPrice(v float64) {
	o.Price = &v
}

// GetPriceByQuantityList returns the PriceByQuantityList field value if set, zero value otherwise.
func (o *ProductModel) GetPriceByQuantityList() []PriceByQuantity {
	if o == nil || o.PriceByQuantityList == nil {
		var ret []PriceByQuantity
		return ret
	}
	return o.PriceByQuantityList
}

// GetPriceByQuantityListOk returns a tuple with the PriceByQuantityList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetPriceByQuantityListOk() ([]PriceByQuantity, bool) {
	if o == nil || o.PriceByQuantityList == nil {
		return nil, false
	}
	return o.PriceByQuantityList, true
}

// HasPriceByQuantityList returns a boolean if a field has been set.
func (o *ProductModel) HasPriceByQuantityList() bool {
	if o != nil && o.PriceByQuantityList != nil {
		return true
	}

	return false
}

// SetPriceByQuantityList gets a reference to the given []PriceByQuantity and assigns it to the PriceByQuantityList field.
func (o *ProductModel) SetPriceByQuantityList(v []PriceByQuantity) {
	o.PriceByQuantityList = v
}

// GetProductCode returns the ProductCode field value if set, zero value otherwise.
func (o *ProductModel) GetProductCode() string {
	if o == nil || o.ProductCode == nil {
		var ret string
		return ret
	}
	return *o.ProductCode
}

// GetProductCodeOk returns a tuple with the ProductCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetProductCodeOk() (*string, bool) {
	if o == nil || o.ProductCode == nil {
		return nil, false
	}
	return o.ProductCode, true
}

// HasProductCode returns a boolean if a field has been set.
func (o *ProductModel) HasProductCode() bool {
	if o != nil && o.ProductCode != nil {
		return true
	}

	return false
}

// SetProductCode gets a reference to the given string and assigns it to the ProductCode field.
func (o *ProductModel) SetProductCode(v string) {
	o.ProductCode = &v
}

// GetProductInfoURL returns the ProductInfoURL field value if set, zero value otherwise.
func (o *ProductModel) GetProductInfoURL() string {
	if o == nil || o.ProductInfoURL == nil {
		var ret string
		return ret
	}
	return *o.ProductInfoURL
}

// GetProductInfoURLOk returns a tuple with the ProductInfoURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetProductInfoURLOk() (*string, bool) {
	if o == nil || o.ProductInfoURL == nil {
		return nil, false
	}
	return o.ProductInfoURL, true
}

// HasProductInfoURL returns a boolean if a field has been set.
func (o *ProductModel) HasProductInfoURL() bool {
	if o != nil && o.ProductInfoURL != nil {
		return true
	}

	return false
}

// SetProductInfoURL gets a reference to the given string and assigns it to the ProductInfoURL field.
func (o *ProductModel) SetProductInfoURL(v string) {
	o.ProductInfoURL = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *ProductModel) GetProductName() string {
	if o == nil || o.ProductName == nil {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetProductNameOk() (*string, bool) {
	if o == nil || o.ProductName == nil {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *ProductModel) HasProductName() bool {
	if o != nil && o.ProductName != nil {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *ProductModel) SetProductName(v string) {
	o.ProductName = &v
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *ProductModel) GetProductType() string {
	if o == nil || o.ProductType == nil {
		var ret string
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetProductTypeOk() (*string, bool) {
	if o == nil || o.ProductType == nil {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *ProductModel) HasProductType() bool {
	if o != nil && o.ProductType != nil {
		return true
	}

	return false
}

// SetProductType gets a reference to the given string and assigns it to the ProductType field.
func (o *ProductModel) SetProductType(v string) {
	o.ProductType = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ProductModel) GetProperties() map[string]string {
	if o == nil || o.Properties == nil {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ProductModel) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *ProductModel) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetRegularPrice returns the RegularPrice field value if set, zero value otherwise.
func (o *ProductModel) GetRegularPrice() float64 {
	if o == nil || o.RegularPrice == nil {
		var ret float64
		return ret
	}
	return *o.RegularPrice
}

// GetRegularPriceOk returns a tuple with the RegularPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetRegularPriceOk() (*float64, bool) {
	if o == nil || o.RegularPrice == nil {
		return nil, false
	}
	return o.RegularPrice, true
}

// HasRegularPrice returns a boolean if a field has been set.
func (o *ProductModel) HasRegularPrice() bool {
	if o != nil && o.RegularPrice != nil {
		return true
	}

	return false
}

// SetRegularPrice gets a reference to the given float64 and assigns it to the RegularPrice field.
func (o *ProductModel) SetRegularPrice(v float64) {
	o.RegularPrice = &v
}

// GetTaxIncludedPrice returns the TaxIncludedPrice field value if set, zero value otherwise.
func (o *ProductModel) GetTaxIncludedPrice() float64 {
	if o == nil || o.TaxIncludedPrice == nil {
		var ret float64
		return ret
	}
	return *o.TaxIncludedPrice
}

// GetTaxIncludedPriceOk returns a tuple with the TaxIncludedPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetTaxIncludedPriceOk() (*float64, bool) {
	if o == nil || o.TaxIncludedPrice == nil {
		return nil, false
	}
	return o.TaxIncludedPrice, true
}

// HasTaxIncludedPrice returns a boolean if a field has been set.
func (o *ProductModel) HasTaxIncludedPrice() bool {
	if o != nil && o.TaxIncludedPrice != nil {
		return true
	}

	return false
}

// SetTaxIncludedPrice gets a reference to the given float64 and assigns it to the TaxIncludedPrice field.
func (o *ProductModel) SetTaxIncludedPrice(v float64) {
	o.TaxIncludedPrice = &v
}

// GetTaxIncludedRegularPrice returns the TaxIncludedRegularPrice field value if set, zero value otherwise.
func (o *ProductModel) GetTaxIncludedRegularPrice() float64 {
	if o == nil || o.TaxIncludedRegularPrice == nil {
		var ret float64
		return ret
	}
	return *o.TaxIncludedRegularPrice
}

// GetTaxIncludedRegularPriceOk returns a tuple with the TaxIncludedRegularPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductModel) GetTaxIncludedRegularPriceOk() (*float64, bool) {
	if o == nil || o.TaxIncludedRegularPrice == nil {
		return nil, false
	}
	return o.TaxIncludedRegularPrice, true
}

// HasTaxIncludedRegularPrice returns a boolean if a field has been set.
func (o *ProductModel) HasTaxIncludedRegularPrice() bool {
	if o != nil && o.TaxIncludedRegularPrice != nil {
		return true
	}

	return false
}

// SetTaxIncludedRegularPrice gets a reference to the given float64 and assigns it to the TaxIncludedRegularPrice field.
func (o *ProductModel) SetTaxIncludedRegularPrice(v float64) {
	o.TaxIncludedRegularPrice = &v
}

func (o ProductModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CampaignCode != nil {
		toSerialize["campaignCode"] = o.CampaignCode
	}
	if o.ConsignorId != nil {
		toSerialize["consignorId"] = o.ConsignorId
	}
	if o.ConsignorName != nil {
		toSerialize["consignorName"] = o.ConsignorName
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.MaxQuantity != nil {
		toSerialize["maxQuantity"] = o.MaxQuantity
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.PriceByQuantityList != nil {
		toSerialize["priceByQuantityList"] = o.PriceByQuantityList
	}
	if o.ProductCode != nil {
		toSerialize["productCode"] = o.ProductCode
	}
	if o.ProductInfoURL != nil {
		toSerialize["productInfoURL"] = o.ProductInfoURL
	}
	if o.ProductName != nil {
		toSerialize["productName"] = o.ProductName
	}
	if o.ProductType != nil {
		toSerialize["productType"] = o.ProductType
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.RegularPrice != nil {
		toSerialize["regularPrice"] = o.RegularPrice
	}
	if o.TaxIncludedPrice != nil {
		toSerialize["taxIncludedPrice"] = o.TaxIncludedPrice
	}
	if o.TaxIncludedRegularPrice != nil {
		toSerialize["taxIncludedRegularPrice"] = o.TaxIncludedRegularPrice
	}
	return json.Marshal(toSerialize)
}

type NullableProductModel struct {
	value *ProductModel
	isSet bool
}

func (v NullableProductModel) Get() *ProductModel {
	return v.value
}

func (v *NullableProductModel) Set(val *ProductModel) {
	v.value = val
	v.isSet = true
}

func (v NullableProductModel) IsSet() bool {
	return v.isSet
}

func (v *NullableProductModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductModel(val *ProductModel) *NullableProductModel {
	return &NullableProductModel{value: val, isSet: true}
}

func (v NullableProductModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


