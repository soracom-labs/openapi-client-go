/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ReferenceUrl struct for ReferenceUrl
type ReferenceUrl struct {
	Title *string `json:"title,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewReferenceUrl instantiates a new ReferenceUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferenceUrl() *ReferenceUrl {
	this := ReferenceUrl{}
	return &this
}

// NewReferenceUrlWithDefaults instantiates a new ReferenceUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceUrlWithDefaults() *ReferenceUrl {
	this := ReferenceUrl{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ReferenceUrl) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceUrl) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ReferenceUrl) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ReferenceUrl) SetTitle(v string) {
	o.Title = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ReferenceUrl) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceUrl) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ReferenceUrl) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ReferenceUrl) SetUrl(v string) {
	o.Url = &v
}

func (o ReferenceUrl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableReferenceUrl struct {
	value *ReferenceUrl
	isSet bool
}

func (v NullableReferenceUrl) Get() *ReferenceUrl {
	return v.value
}

func (v *NullableReferenceUrl) Set(val *ReferenceUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceUrl(val *ReferenceUrl) *NullableReferenceUrl {
	return &NullableReferenceUrl{value: val, isSet: true}
}

func (v NullableReferenceUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


