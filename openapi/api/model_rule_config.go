/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// RuleConfig struct for RuleConfig
type RuleConfig struct {
	Properties RuleConfigProperty `json:"properties"`
	Type string `json:"type"`
}

// NewRuleConfig instantiates a new RuleConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleConfig(properties RuleConfigProperty, type_ string) *RuleConfig {
	this := RuleConfig{}
	this.Properties = properties
	this.Type = type_
	return &this
}

// NewRuleConfigWithDefaults instantiates a new RuleConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleConfigWithDefaults() *RuleConfig {
	this := RuleConfig{}
	return &this
}

// GetProperties returns the Properties field value
func (o *RuleConfig) GetProperties() RuleConfigProperty {
	if o == nil {
		var ret RuleConfigProperty
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *RuleConfig) GetPropertiesOk() (*RuleConfigProperty, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *RuleConfig) SetProperties(v RuleConfigProperty) {
	o.Properties = v
}

// GetType returns the Type field value
func (o *RuleConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RuleConfig) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RuleConfig) SetType(v string) {
	o.Type = v
}

func (o RuleConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["properties"] = o.Properties
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableRuleConfig struct {
	value *RuleConfig
	isSet bool
}

func (v NullableRuleConfig) Get() *RuleConfig {
	return v.value
}

func (v *NullableRuleConfig) Set(val *RuleConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleConfig(val *RuleConfig) *NullableRuleConfig {
	return &NullableRuleConfig{value: val, isSet: true}
}

func (v NullableRuleConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


