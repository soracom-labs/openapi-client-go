/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// RuleConfigProperty struct for RuleConfigProperty
type RuleConfigProperty struct {
	InactiveTimeoutDateConst string `json:"inactiveTimeoutDateConst"`
	InactiveTimeoutOffsetMinutes *string `json:"inactiveTimeoutOffsetMinutes,omitempty"`
	LimitTotalAmount *string `json:"limitTotalAmount,omitempty"`
	LimitTotalTrafficMegaByte *string `json:"limitTotalTrafficMegaByte,omitempty"`
	RunOnceAmongTarget *string `json:"runOnceAmongTarget,omitempty"`
	// Only for SimSubscriptionStatusRule
	TargetOtaStatus *string `json:"targetOtaStatus,omitempty"`
	// Only for SubscriberSpeedClassAttributeRule, SimSpeedClassAttributeRule
	TargetSpeedClass *string `json:"targetSpeedClass,omitempty"`
	// Only for SubscriberStatusAttributeRule, SimStatusAttributeRule
	TargetStatus *string `json:"targetStatus,omitempty"`
}

// NewRuleConfigProperty instantiates a new RuleConfigProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleConfigProperty(inactiveTimeoutDateConst string) *RuleConfigProperty {
	this := RuleConfigProperty{}
	this.InactiveTimeoutDateConst = inactiveTimeoutDateConst
	return &this
}

// NewRuleConfigPropertyWithDefaults instantiates a new RuleConfigProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleConfigPropertyWithDefaults() *RuleConfigProperty {
	this := RuleConfigProperty{}
	return &this
}

// GetInactiveTimeoutDateConst returns the InactiveTimeoutDateConst field value
func (o *RuleConfigProperty) GetInactiveTimeoutDateConst() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InactiveTimeoutDateConst
}

// GetInactiveTimeoutDateConstOk returns a tuple with the InactiveTimeoutDateConst field value
// and a boolean to check if the value has been set.
func (o *RuleConfigProperty) GetInactiveTimeoutDateConstOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InactiveTimeoutDateConst, true
}

// SetInactiveTimeoutDateConst sets field value
func (o *RuleConfigProperty) SetInactiveTimeoutDateConst(v string) {
	o.InactiveTimeoutDateConst = v
}

// GetInactiveTimeoutOffsetMinutes returns the InactiveTimeoutOffsetMinutes field value if set, zero value otherwise.
func (o *RuleConfigProperty) GetInactiveTimeoutOffsetMinutes() string {
	if o == nil || o.InactiveTimeoutOffsetMinutes == nil {
		var ret string
		return ret
	}
	return *o.InactiveTimeoutOffsetMinutes
}

// GetInactiveTimeoutOffsetMinutesOk returns a tuple with the InactiveTimeoutOffsetMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleConfigProperty) GetInactiveTimeoutOffsetMinutesOk() (*string, bool) {
	if o == nil || o.InactiveTimeoutOffsetMinutes == nil {
		return nil, false
	}
	return o.InactiveTimeoutOffsetMinutes, true
}

// HasInactiveTimeoutOffsetMinutes returns a boolean if a field has been set.
func (o *RuleConfigProperty) HasInactiveTimeoutOffsetMinutes() bool {
	if o != nil && o.InactiveTimeoutOffsetMinutes != nil {
		return true
	}

	return false
}

// SetInactiveTimeoutOffsetMinutes gets a reference to the given string and assigns it to the InactiveTimeoutOffsetMinutes field.
func (o *RuleConfigProperty) SetInactiveTimeoutOffsetMinutes(v string) {
	o.InactiveTimeoutOffsetMinutes = &v
}

// GetLimitTotalAmount returns the LimitTotalAmount field value if set, zero value otherwise.
func (o *RuleConfigProperty) GetLimitTotalAmount() string {
	if o == nil || o.LimitTotalAmount == nil {
		var ret string
		return ret
	}
	return *o.LimitTotalAmount
}

// GetLimitTotalAmountOk returns a tuple with the LimitTotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleConfigProperty) GetLimitTotalAmountOk() (*string, bool) {
	if o == nil || o.LimitTotalAmount == nil {
		return nil, false
	}
	return o.LimitTotalAmount, true
}

// HasLimitTotalAmount returns a boolean if a field has been set.
func (o *RuleConfigProperty) HasLimitTotalAmount() bool {
	if o != nil && o.LimitTotalAmount != nil {
		return true
	}

	return false
}

// SetLimitTotalAmount gets a reference to the given string and assigns it to the LimitTotalAmount field.
func (o *RuleConfigProperty) SetLimitTotalAmount(v string) {
	o.LimitTotalAmount = &v
}

// GetLimitTotalTrafficMegaByte returns the LimitTotalTrafficMegaByte field value if set, zero value otherwise.
func (o *RuleConfigProperty) GetLimitTotalTrafficMegaByte() string {
	if o == nil || o.LimitTotalTrafficMegaByte == nil {
		var ret string
		return ret
	}
	return *o.LimitTotalTrafficMegaByte
}

// GetLimitTotalTrafficMegaByteOk returns a tuple with the LimitTotalTrafficMegaByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleConfigProperty) GetLimitTotalTrafficMegaByteOk() (*string, bool) {
	if o == nil || o.LimitTotalTrafficMegaByte == nil {
		return nil, false
	}
	return o.LimitTotalTrafficMegaByte, true
}

// HasLimitTotalTrafficMegaByte returns a boolean if a field has been set.
func (o *RuleConfigProperty) HasLimitTotalTrafficMegaByte() bool {
	if o != nil && o.LimitTotalTrafficMegaByte != nil {
		return true
	}

	return false
}

// SetLimitTotalTrafficMegaByte gets a reference to the given string and assigns it to the LimitTotalTrafficMegaByte field.
func (o *RuleConfigProperty) SetLimitTotalTrafficMegaByte(v string) {
	o.LimitTotalTrafficMegaByte = &v
}

// GetRunOnceAmongTarget returns the RunOnceAmongTarget field value if set, zero value otherwise.
func (o *RuleConfigProperty) GetRunOnceAmongTarget() string {
	if o == nil || o.RunOnceAmongTarget == nil {
		var ret string
		return ret
	}
	return *o.RunOnceAmongTarget
}

// GetRunOnceAmongTargetOk returns a tuple with the RunOnceAmongTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleConfigProperty) GetRunOnceAmongTargetOk() (*string, bool) {
	if o == nil || o.RunOnceAmongTarget == nil {
		return nil, false
	}
	return o.RunOnceAmongTarget, true
}

// HasRunOnceAmongTarget returns a boolean if a field has been set.
func (o *RuleConfigProperty) HasRunOnceAmongTarget() bool {
	if o != nil && o.RunOnceAmongTarget != nil {
		return true
	}

	return false
}

// SetRunOnceAmongTarget gets a reference to the given string and assigns it to the RunOnceAmongTarget field.
func (o *RuleConfigProperty) SetRunOnceAmongTarget(v string) {
	o.RunOnceAmongTarget = &v
}

// GetTargetOtaStatus returns the TargetOtaStatus field value if set, zero value otherwise.
func (o *RuleConfigProperty) GetTargetOtaStatus() string {
	if o == nil || o.TargetOtaStatus == nil {
		var ret string
		return ret
	}
	return *o.TargetOtaStatus
}

// GetTargetOtaStatusOk returns a tuple with the TargetOtaStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleConfigProperty) GetTargetOtaStatusOk() (*string, bool) {
	if o == nil || o.TargetOtaStatus == nil {
		return nil, false
	}
	return o.TargetOtaStatus, true
}

// HasTargetOtaStatus returns a boolean if a field has been set.
func (o *RuleConfigProperty) HasTargetOtaStatus() bool {
	if o != nil && o.TargetOtaStatus != nil {
		return true
	}

	return false
}

// SetTargetOtaStatus gets a reference to the given string and assigns it to the TargetOtaStatus field.
func (o *RuleConfigProperty) SetTargetOtaStatus(v string) {
	o.TargetOtaStatus = &v
}

// GetTargetSpeedClass returns the TargetSpeedClass field value if set, zero value otherwise.
func (o *RuleConfigProperty) GetTargetSpeedClass() string {
	if o == nil || o.TargetSpeedClass == nil {
		var ret string
		return ret
	}
	return *o.TargetSpeedClass
}

// GetTargetSpeedClassOk returns a tuple with the TargetSpeedClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleConfigProperty) GetTargetSpeedClassOk() (*string, bool) {
	if o == nil || o.TargetSpeedClass == nil {
		return nil, false
	}
	return o.TargetSpeedClass, true
}

// HasTargetSpeedClass returns a boolean if a field has been set.
func (o *RuleConfigProperty) HasTargetSpeedClass() bool {
	if o != nil && o.TargetSpeedClass != nil {
		return true
	}

	return false
}

// SetTargetSpeedClass gets a reference to the given string and assigns it to the TargetSpeedClass field.
func (o *RuleConfigProperty) SetTargetSpeedClass(v string) {
	o.TargetSpeedClass = &v
}

// GetTargetStatus returns the TargetStatus field value if set, zero value otherwise.
func (o *RuleConfigProperty) GetTargetStatus() string {
	if o == nil || o.TargetStatus == nil {
		var ret string
		return ret
	}
	return *o.TargetStatus
}

// GetTargetStatusOk returns a tuple with the TargetStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleConfigProperty) GetTargetStatusOk() (*string, bool) {
	if o == nil || o.TargetStatus == nil {
		return nil, false
	}
	return o.TargetStatus, true
}

// HasTargetStatus returns a boolean if a field has been set.
func (o *RuleConfigProperty) HasTargetStatus() bool {
	if o != nil && o.TargetStatus != nil {
		return true
	}

	return false
}

// SetTargetStatus gets a reference to the given string and assigns it to the TargetStatus field.
func (o *RuleConfigProperty) SetTargetStatus(v string) {
	o.TargetStatus = &v
}

func (o RuleConfigProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["inactiveTimeoutDateConst"] = o.InactiveTimeoutDateConst
	}
	if o.InactiveTimeoutOffsetMinutes != nil {
		toSerialize["inactiveTimeoutOffsetMinutes"] = o.InactiveTimeoutOffsetMinutes
	}
	if o.LimitTotalAmount != nil {
		toSerialize["limitTotalAmount"] = o.LimitTotalAmount
	}
	if o.LimitTotalTrafficMegaByte != nil {
		toSerialize["limitTotalTrafficMegaByte"] = o.LimitTotalTrafficMegaByte
	}
	if o.RunOnceAmongTarget != nil {
		toSerialize["runOnceAmongTarget"] = o.RunOnceAmongTarget
	}
	if o.TargetOtaStatus != nil {
		toSerialize["targetOtaStatus"] = o.TargetOtaStatus
	}
	if o.TargetSpeedClass != nil {
		toSerialize["targetSpeedClass"] = o.TargetSpeedClass
	}
	if o.TargetStatus != nil {
		toSerialize["targetStatus"] = o.TargetStatus
	}
	return json.Marshal(toSerialize)
}

type NullableRuleConfigProperty struct {
	value *RuleConfigProperty
	isSet bool
}

func (v NullableRuleConfigProperty) Get() *RuleConfigProperty {
	return v.value
}

func (v *NullableRuleConfigProperty) Set(val *RuleConfigProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleConfigProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleConfigProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleConfigProperty(val *RuleConfigProperty) *NullableRuleConfigProperty {
	return &NullableRuleConfigProperty{value: val, isSet: true}
}

func (v NullableRuleConfigProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleConfigProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


