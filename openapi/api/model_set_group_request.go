/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SetGroupRequest struct for SetGroupRequest
type SetGroupRequest struct {
	GroupId *string `json:"groupId,omitempty"`
	// An object which always contains at least one property \"name\" with a string value. If you give a subscriber/SIM a name, the name will be returned as the value of the \"name\" property. If the subscriber/SIM does not have a name, an empty string \"\" is returned. In addition, if you create any custom tags for the subscriber/SIM, each custom tag will appear as additional properties in the object.
	Tags *map[string]string `json:"tags,omitempty"`
}

// NewSetGroupRequest instantiates a new SetGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetGroupRequest() *SetGroupRequest {
	this := SetGroupRequest{}
	return &this
}

// NewSetGroupRequestWithDefaults instantiates a new SetGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetGroupRequestWithDefaults() *SetGroupRequest {
	this := SetGroupRequest{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *SetGroupRequest) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetGroupRequest) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *SetGroupRequest) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *SetGroupRequest) SetGroupId(v string) {
	o.GroupId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SetGroupRequest) GetTags() map[string]string {
	if o == nil || o.Tags == nil {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetGroupRequest) GetTagsOk() (*map[string]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SetGroupRequest) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *SetGroupRequest) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o SetGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupId != nil {
		toSerialize["groupId"] = o.GroupId
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableSetGroupRequest struct {
	value *SetGroupRequest
	isSet bool
}

func (v NullableSetGroupRequest) Get() *SetGroupRequest {
	return v.value
}

func (v *NullableSetGroupRequest) Set(val *SetGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetGroupRequest(val *SetGroupRequest) *NullableSetGroupRequest {
	return &NullableSetGroupRequest{value: val, isSet: true}
}

func (v NullableSetGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


