/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SimProfile struct for SimProfile
type SimProfile struct {
	ArcClientPeerPrivateKey *string `json:"arcClientPeerPrivateKey,omitempty"`
	ArcClientPeerPublicKey *string `json:"arcClientPeerPublicKey,omitempty"`
	Iccid *string `json:"iccid,omitempty"`
	OtaSupported *bool `json:"otaSupported,omitempty"`
	PrimaryImsi *string `json:"primaryImsi,omitempty"`
	Subscribers *map[string]SimplifiedSubscriber `json:"subscribers,omitempty"`
}

// NewSimProfile instantiates a new SimProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimProfile() *SimProfile {
	this := SimProfile{}
	return &this
}

// NewSimProfileWithDefaults instantiates a new SimProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimProfileWithDefaults() *SimProfile {
	this := SimProfile{}
	return &this
}

// GetArcClientPeerPrivateKey returns the ArcClientPeerPrivateKey field value if set, zero value otherwise.
func (o *SimProfile) GetArcClientPeerPrivateKey() string {
	if o == nil || o.ArcClientPeerPrivateKey == nil {
		var ret string
		return ret
	}
	return *o.ArcClientPeerPrivateKey
}

// GetArcClientPeerPrivateKeyOk returns a tuple with the ArcClientPeerPrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimProfile) GetArcClientPeerPrivateKeyOk() (*string, bool) {
	if o == nil || o.ArcClientPeerPrivateKey == nil {
		return nil, false
	}
	return o.ArcClientPeerPrivateKey, true
}

// HasArcClientPeerPrivateKey returns a boolean if a field has been set.
func (o *SimProfile) HasArcClientPeerPrivateKey() bool {
	if o != nil && o.ArcClientPeerPrivateKey != nil {
		return true
	}

	return false
}

// SetArcClientPeerPrivateKey gets a reference to the given string and assigns it to the ArcClientPeerPrivateKey field.
func (o *SimProfile) SetArcClientPeerPrivateKey(v string) {
	o.ArcClientPeerPrivateKey = &v
}

// GetArcClientPeerPublicKey returns the ArcClientPeerPublicKey field value if set, zero value otherwise.
func (o *SimProfile) GetArcClientPeerPublicKey() string {
	if o == nil || o.ArcClientPeerPublicKey == nil {
		var ret string
		return ret
	}
	return *o.ArcClientPeerPublicKey
}

// GetArcClientPeerPublicKeyOk returns a tuple with the ArcClientPeerPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimProfile) GetArcClientPeerPublicKeyOk() (*string, bool) {
	if o == nil || o.ArcClientPeerPublicKey == nil {
		return nil, false
	}
	return o.ArcClientPeerPublicKey, true
}

// HasArcClientPeerPublicKey returns a boolean if a field has been set.
func (o *SimProfile) HasArcClientPeerPublicKey() bool {
	if o != nil && o.ArcClientPeerPublicKey != nil {
		return true
	}

	return false
}

// SetArcClientPeerPublicKey gets a reference to the given string and assigns it to the ArcClientPeerPublicKey field.
func (o *SimProfile) SetArcClientPeerPublicKey(v string) {
	o.ArcClientPeerPublicKey = &v
}

// GetIccid returns the Iccid field value if set, zero value otherwise.
func (o *SimProfile) GetIccid() string {
	if o == nil || o.Iccid == nil {
		var ret string
		return ret
	}
	return *o.Iccid
}

// GetIccidOk returns a tuple with the Iccid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimProfile) GetIccidOk() (*string, bool) {
	if o == nil || o.Iccid == nil {
		return nil, false
	}
	return o.Iccid, true
}

// HasIccid returns a boolean if a field has been set.
func (o *SimProfile) HasIccid() bool {
	if o != nil && o.Iccid != nil {
		return true
	}

	return false
}

// SetIccid gets a reference to the given string and assigns it to the Iccid field.
func (o *SimProfile) SetIccid(v string) {
	o.Iccid = &v
}

// GetOtaSupported returns the OtaSupported field value if set, zero value otherwise.
func (o *SimProfile) GetOtaSupported() bool {
	if o == nil || o.OtaSupported == nil {
		var ret bool
		return ret
	}
	return *o.OtaSupported
}

// GetOtaSupportedOk returns a tuple with the OtaSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimProfile) GetOtaSupportedOk() (*bool, bool) {
	if o == nil || o.OtaSupported == nil {
		return nil, false
	}
	return o.OtaSupported, true
}

// HasOtaSupported returns a boolean if a field has been set.
func (o *SimProfile) HasOtaSupported() bool {
	if o != nil && o.OtaSupported != nil {
		return true
	}

	return false
}

// SetOtaSupported gets a reference to the given bool and assigns it to the OtaSupported field.
func (o *SimProfile) SetOtaSupported(v bool) {
	o.OtaSupported = &v
}

// GetPrimaryImsi returns the PrimaryImsi field value if set, zero value otherwise.
func (o *SimProfile) GetPrimaryImsi() string {
	if o == nil || o.PrimaryImsi == nil {
		var ret string
		return ret
	}
	return *o.PrimaryImsi
}

// GetPrimaryImsiOk returns a tuple with the PrimaryImsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimProfile) GetPrimaryImsiOk() (*string, bool) {
	if o == nil || o.PrimaryImsi == nil {
		return nil, false
	}
	return o.PrimaryImsi, true
}

// HasPrimaryImsi returns a boolean if a field has been set.
func (o *SimProfile) HasPrimaryImsi() bool {
	if o != nil && o.PrimaryImsi != nil {
		return true
	}

	return false
}

// SetPrimaryImsi gets a reference to the given string and assigns it to the PrimaryImsi field.
func (o *SimProfile) SetPrimaryImsi(v string) {
	o.PrimaryImsi = &v
}

// GetSubscribers returns the Subscribers field value if set, zero value otherwise.
func (o *SimProfile) GetSubscribers() map[string]SimplifiedSubscriber {
	if o == nil || o.Subscribers == nil {
		var ret map[string]SimplifiedSubscriber
		return ret
	}
	return *o.Subscribers
}

// GetSubscribersOk returns a tuple with the Subscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimProfile) GetSubscribersOk() (*map[string]SimplifiedSubscriber, bool) {
	if o == nil || o.Subscribers == nil {
		return nil, false
	}
	return o.Subscribers, true
}

// HasSubscribers returns a boolean if a field has been set.
func (o *SimProfile) HasSubscribers() bool {
	if o != nil && o.Subscribers != nil {
		return true
	}

	return false
}

// SetSubscribers gets a reference to the given map[string]SimplifiedSubscriber and assigns it to the Subscribers field.
func (o *SimProfile) SetSubscribers(v map[string]SimplifiedSubscriber) {
	o.Subscribers = &v
}

func (o SimProfile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArcClientPeerPrivateKey != nil {
		toSerialize["arcClientPeerPrivateKey"] = o.ArcClientPeerPrivateKey
	}
	if o.ArcClientPeerPublicKey != nil {
		toSerialize["arcClientPeerPublicKey"] = o.ArcClientPeerPublicKey
	}
	if o.Iccid != nil {
		toSerialize["iccid"] = o.Iccid
	}
	if o.OtaSupported != nil {
		toSerialize["otaSupported"] = o.OtaSupported
	}
	if o.PrimaryImsi != nil {
		toSerialize["primaryImsi"] = o.PrimaryImsi
	}
	if o.Subscribers != nil {
		toSerialize["subscribers"] = o.Subscribers
	}
	return json.Marshal(toSerialize)
}

type NullableSimProfile struct {
	value *SimProfile
	isSet bool
}

func (v NullableSimProfile) Get() *SimProfile {
	return v.value
}

func (v *NullableSimProfile) Set(val *SimProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableSimProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableSimProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimProfile(val *SimProfile) *NullableSimProfile {
	return &NullableSimProfile{value: val, isSet: true}
}

func (v NullableSimProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


