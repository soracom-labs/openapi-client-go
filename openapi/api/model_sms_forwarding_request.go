/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SmsForwardingRequest struct for SmsForwardingRequest
type SmsForwardingRequest struct {
	// Encoding type of the message body. `1` indicates the body is `DCS_7BIT` that only supports single byte characters. `2` is `DCS_UCS2` that supports multi-byte text. When omitted, it is treated as `2` (`DCS_UCS2`).
	EncodingType *int32 `json:"encodingType,omitempty"`
	Payload *string `json:"payload,omitempty"`
}

// NewSmsForwardingRequest instantiates a new SmsForwardingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsForwardingRequest() *SmsForwardingRequest {
	this := SmsForwardingRequest{}
	var encodingType int32 = 2
	this.EncodingType = &encodingType
	return &this
}

// NewSmsForwardingRequestWithDefaults instantiates a new SmsForwardingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsForwardingRequestWithDefaults() *SmsForwardingRequest {
	this := SmsForwardingRequest{}
	var encodingType int32 = 2
	this.EncodingType = &encodingType
	return &this
}

// GetEncodingType returns the EncodingType field value if set, zero value otherwise.
func (o *SmsForwardingRequest) GetEncodingType() int32 {
	if o == nil || o.EncodingType == nil {
		var ret int32
		return ret
	}
	return *o.EncodingType
}

// GetEncodingTypeOk returns a tuple with the EncodingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsForwardingRequest) GetEncodingTypeOk() (*int32, bool) {
	if o == nil || o.EncodingType == nil {
		return nil, false
	}
	return o.EncodingType, true
}

// HasEncodingType returns a boolean if a field has been set.
func (o *SmsForwardingRequest) HasEncodingType() bool {
	if o != nil && o.EncodingType != nil {
		return true
	}

	return false
}

// SetEncodingType gets a reference to the given int32 and assigns it to the EncodingType field.
func (o *SmsForwardingRequest) SetEncodingType(v int32) {
	o.EncodingType = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *SmsForwardingRequest) GetPayload() string {
	if o == nil || o.Payload == nil {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsForwardingRequest) GetPayloadOk() (*string, bool) {
	if o == nil || o.Payload == nil {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *SmsForwardingRequest) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *SmsForwardingRequest) SetPayload(v string) {
	o.Payload = &v
}

func (o SmsForwardingRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EncodingType != nil {
		toSerialize["encodingType"] = o.EncodingType
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	return json.Marshal(toSerialize)
}

type NullableSmsForwardingRequest struct {
	value *SmsForwardingRequest
	isSet bool
}

func (v NullableSmsForwardingRequest) Get() *SmsForwardingRequest {
	return v.value
}

func (v *NullableSmsForwardingRequest) Set(val *SmsForwardingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsForwardingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsForwardingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsForwardingRequest(val *SmsForwardingRequest) *NullableSmsForwardingRequest {
	return &NullableSmsForwardingRequest{value: val, isSet: true}
}

func (v NullableSmsForwardingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsForwardingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


