/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Soralet struct for Soralet
type Soralet struct {
	CreatedTime *int64 `json:"createdTime,omitempty"`
	Description *string `json:"description,omitempty"`
	OperatorId *string `json:"operatorId,omitempty"`
	SoraletId *string `json:"soraletId,omitempty"`
	UpdatedTime *int64 `json:"updatedTime,omitempty"`
}

// NewSoralet instantiates a new Soralet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoralet() *Soralet {
	this := Soralet{}
	return &this
}

// NewSoraletWithDefaults instantiates a new Soralet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoraletWithDefaults() *Soralet {
	this := Soralet{}
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Soralet) GetCreatedTime() int64 {
	if o == nil || o.CreatedTime == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Soralet) GetCreatedTimeOk() (*int64, bool) {
	if o == nil || o.CreatedTime == nil {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Soralet) HasCreatedTime() bool {
	if o != nil && o.CreatedTime != nil {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given int64 and assigns it to the CreatedTime field.
func (o *Soralet) SetCreatedTime(v int64) {
	o.CreatedTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Soralet) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Soralet) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Soralet) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Soralet) SetDescription(v string) {
	o.Description = &v
}

// GetOperatorId returns the OperatorId field value if set, zero value otherwise.
func (o *Soralet) GetOperatorId() string {
	if o == nil || o.OperatorId == nil {
		var ret string
		return ret
	}
	return *o.OperatorId
}

// GetOperatorIdOk returns a tuple with the OperatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Soralet) GetOperatorIdOk() (*string, bool) {
	if o == nil || o.OperatorId == nil {
		return nil, false
	}
	return o.OperatorId, true
}

// HasOperatorId returns a boolean if a field has been set.
func (o *Soralet) HasOperatorId() bool {
	if o != nil && o.OperatorId != nil {
		return true
	}

	return false
}

// SetOperatorId gets a reference to the given string and assigns it to the OperatorId field.
func (o *Soralet) SetOperatorId(v string) {
	o.OperatorId = &v
}

// GetSoraletId returns the SoraletId field value if set, zero value otherwise.
func (o *Soralet) GetSoraletId() string {
	if o == nil || o.SoraletId == nil {
		var ret string
		return ret
	}
	return *o.SoraletId
}

// GetSoraletIdOk returns a tuple with the SoraletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Soralet) GetSoraletIdOk() (*string, bool) {
	if o == nil || o.SoraletId == nil {
		return nil, false
	}
	return o.SoraletId, true
}

// HasSoraletId returns a boolean if a field has been set.
func (o *Soralet) HasSoraletId() bool {
	if o != nil && o.SoraletId != nil {
		return true
	}

	return false
}

// SetSoraletId gets a reference to the given string and assigns it to the SoraletId field.
func (o *Soralet) SetSoraletId(v string) {
	o.SoraletId = &v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *Soralet) GetUpdatedTime() int64 {
	if o == nil || o.UpdatedTime == nil {
		var ret int64
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Soralet) GetUpdatedTimeOk() (*int64, bool) {
	if o == nil || o.UpdatedTime == nil {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *Soralet) HasUpdatedTime() bool {
	if o != nil && o.UpdatedTime != nil {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given int64 and assigns it to the UpdatedTime field.
func (o *Soralet) SetUpdatedTime(v int64) {
	o.UpdatedTime = &v
}

func (o Soralet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedTime != nil {
		toSerialize["createdTime"] = o.CreatedTime
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.OperatorId != nil {
		toSerialize["operatorId"] = o.OperatorId
	}
	if o.SoraletId != nil {
		toSerialize["soraletId"] = o.SoraletId
	}
	if o.UpdatedTime != nil {
		toSerialize["updatedTime"] = o.UpdatedTime
	}
	return json.Marshal(toSerialize)
}

type NullableSoralet struct {
	value *Soralet
	isSet bool
}

func (v NullableSoralet) Get() *Soralet {
	return v.value
}

func (v *NullableSoralet) Set(val *Soralet) {
	v.value = val
	v.isSet = true
}

func (v NullableSoralet) IsSet() bool {
	return v.isSet
}

func (v *NullableSoralet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoralet(val *Soralet) *NullableSoralet {
	return &NullableSoralet{value: val, isSet: true}
}

func (v NullableSoralet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoralet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


