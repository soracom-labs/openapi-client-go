/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SoraletLog struct for SoraletLog
type SoraletLog struct {
	CreatedTime *int64 `json:"createdTime,omitempty"`
	Message *string `json:"message,omitempty"`
	OperatorId *string `json:"operatorId,omitempty"`
	SoraletId *string `json:"soraletId,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewSoraletLog instantiates a new SoraletLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoraletLog() *SoraletLog {
	this := SoraletLog{}
	return &this
}

// NewSoraletLogWithDefaults instantiates a new SoraletLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoraletLogWithDefaults() *SoraletLog {
	this := SoraletLog{}
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *SoraletLog) GetCreatedTime() int64 {
	if o == nil || o.CreatedTime == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraletLog) GetCreatedTimeOk() (*int64, bool) {
	if o == nil || o.CreatedTime == nil {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *SoraletLog) HasCreatedTime() bool {
	if o != nil && o.CreatedTime != nil {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given int64 and assigns it to the CreatedTime field.
func (o *SoraletLog) SetCreatedTime(v int64) {
	o.CreatedTime = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SoraletLog) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraletLog) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SoraletLog) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SoraletLog) SetMessage(v string) {
	o.Message = &v
}

// GetOperatorId returns the OperatorId field value if set, zero value otherwise.
func (o *SoraletLog) GetOperatorId() string {
	if o == nil || o.OperatorId == nil {
		var ret string
		return ret
	}
	return *o.OperatorId
}

// GetOperatorIdOk returns a tuple with the OperatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraletLog) GetOperatorIdOk() (*string, bool) {
	if o == nil || o.OperatorId == nil {
		return nil, false
	}
	return o.OperatorId, true
}

// HasOperatorId returns a boolean if a field has been set.
func (o *SoraletLog) HasOperatorId() bool {
	if o != nil && o.OperatorId != nil {
		return true
	}

	return false
}

// SetOperatorId gets a reference to the given string and assigns it to the OperatorId field.
func (o *SoraletLog) SetOperatorId(v string) {
	o.OperatorId = &v
}

// GetSoraletId returns the SoraletId field value if set, zero value otherwise.
func (o *SoraletLog) GetSoraletId() string {
	if o == nil || o.SoraletId == nil {
		var ret string
		return ret
	}
	return *o.SoraletId
}

// GetSoraletIdOk returns a tuple with the SoraletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraletLog) GetSoraletIdOk() (*string, bool) {
	if o == nil || o.SoraletId == nil {
		return nil, false
	}
	return o.SoraletId, true
}

// HasSoraletId returns a boolean if a field has been set.
func (o *SoraletLog) HasSoraletId() bool {
	if o != nil && o.SoraletId != nil {
		return true
	}

	return false
}

// SetSoraletId gets a reference to the given string and assigns it to the SoraletId field.
func (o *SoraletLog) SetSoraletId(v string) {
	o.SoraletId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SoraletLog) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraletLog) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SoraletLog) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *SoraletLog) SetVersion(v int64) {
	o.Version = &v
}

func (o SoraletLog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedTime != nil {
		toSerialize["createdTime"] = o.CreatedTime
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.OperatorId != nil {
		toSerialize["operatorId"] = o.OperatorId
	}
	if o.SoraletId != nil {
		toSerialize["soraletId"] = o.SoraletId
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableSoraletLog struct {
	value *SoraletLog
	isSet bool
}

func (v NullableSoraletLog) Get() *SoraletLog {
	return v.value
}

func (v *NullableSoraletLog) Set(val *SoraletLog) {
	v.value = val
	v.isSet = true
}

func (v NullableSoraletLog) IsSet() bool {
	return v.isSet
}

func (v *NullableSoraletLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoraletLog(val *SoraletLog) *NullableSoraletLog {
	return &NullableSoraletLog{value: val, isSet: true}
}

func (v NullableSoraletLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoraletLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


