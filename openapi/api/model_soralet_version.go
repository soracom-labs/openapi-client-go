/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SoraletVersion struct for SoraletVersion
type SoraletVersion struct {
	CreatedTime *int64 `json:"createdTime,omitempty"`
	Hash *string `json:"hash,omitempty"`
	OperatorId *string `json:"operatorId,omitempty"`
	Size *int64 `json:"size,omitempty"`
	SoraletId *string `json:"soraletId,omitempty"`
	Srn *string `json:"srn,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewSoraletVersion instantiates a new SoraletVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoraletVersion() *SoraletVersion {
	this := SoraletVersion{}
	return &this
}

// NewSoraletVersionWithDefaults instantiates a new SoraletVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoraletVersionWithDefaults() *SoraletVersion {
	this := SoraletVersion{}
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *SoraletVersion) GetCreatedTime() int64 {
	if o == nil || o.CreatedTime == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraletVersion) GetCreatedTimeOk() (*int64, bool) {
	if o == nil || o.CreatedTime == nil {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *SoraletVersion) HasCreatedTime() bool {
	if o != nil && o.CreatedTime != nil {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given int64 and assigns it to the CreatedTime field.
func (o *SoraletVersion) SetCreatedTime(v int64) {
	o.CreatedTime = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *SoraletVersion) GetHash() string {
	if o == nil || o.Hash == nil {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraletVersion) GetHashOk() (*string, bool) {
	if o == nil || o.Hash == nil {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *SoraletVersion) HasHash() bool {
	if o != nil && o.Hash != nil {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *SoraletVersion) SetHash(v string) {
	o.Hash = &v
}

// GetOperatorId returns the OperatorId field value if set, zero value otherwise.
func (o *SoraletVersion) GetOperatorId() string {
	if o == nil || o.OperatorId == nil {
		var ret string
		return ret
	}
	return *o.OperatorId
}

// GetOperatorIdOk returns a tuple with the OperatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraletVersion) GetOperatorIdOk() (*string, bool) {
	if o == nil || o.OperatorId == nil {
		return nil, false
	}
	return o.OperatorId, true
}

// HasOperatorId returns a boolean if a field has been set.
func (o *SoraletVersion) HasOperatorId() bool {
	if o != nil && o.OperatorId != nil {
		return true
	}

	return false
}

// SetOperatorId gets a reference to the given string and assigns it to the OperatorId field.
func (o *SoraletVersion) SetOperatorId(v string) {
	o.OperatorId = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *SoraletVersion) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraletVersion) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *SoraletVersion) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *SoraletVersion) SetSize(v int64) {
	o.Size = &v
}

// GetSoraletId returns the SoraletId field value if set, zero value otherwise.
func (o *SoraletVersion) GetSoraletId() string {
	if o == nil || o.SoraletId == nil {
		var ret string
		return ret
	}
	return *o.SoraletId
}

// GetSoraletIdOk returns a tuple with the SoraletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraletVersion) GetSoraletIdOk() (*string, bool) {
	if o == nil || o.SoraletId == nil {
		return nil, false
	}
	return o.SoraletId, true
}

// HasSoraletId returns a boolean if a field has been set.
func (o *SoraletVersion) HasSoraletId() bool {
	if o != nil && o.SoraletId != nil {
		return true
	}

	return false
}

// SetSoraletId gets a reference to the given string and assigns it to the SoraletId field.
func (o *SoraletVersion) SetSoraletId(v string) {
	o.SoraletId = &v
}

// GetSrn returns the Srn field value if set, zero value otherwise.
func (o *SoraletVersion) GetSrn() string {
	if o == nil || o.Srn == nil {
		var ret string
		return ret
	}
	return *o.Srn
}

// GetSrnOk returns a tuple with the Srn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraletVersion) GetSrnOk() (*string, bool) {
	if o == nil || o.Srn == nil {
		return nil, false
	}
	return o.Srn, true
}

// HasSrn returns a boolean if a field has been set.
func (o *SoraletVersion) HasSrn() bool {
	if o != nil && o.Srn != nil {
		return true
	}

	return false
}

// SetSrn gets a reference to the given string and assigns it to the Srn field.
func (o *SoraletVersion) SetSrn(v string) {
	o.Srn = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SoraletVersion) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoraletVersion) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SoraletVersion) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *SoraletVersion) SetVersion(v int64) {
	o.Version = &v
}

func (o SoraletVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedTime != nil {
		toSerialize["createdTime"] = o.CreatedTime
	}
	if o.Hash != nil {
		toSerialize["hash"] = o.Hash
	}
	if o.OperatorId != nil {
		toSerialize["operatorId"] = o.OperatorId
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.SoraletId != nil {
		toSerialize["soraletId"] = o.SoraletId
	}
	if o.Srn != nil {
		toSerialize["srn"] = o.Srn
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableSoraletVersion struct {
	value *SoraletVersion
	isSet bool
}

func (v NullableSoraletVersion) Get() *SoraletVersion {
	return v.value
}

func (v *NullableSoraletVersion) Set(val *SoraletVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableSoraletVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableSoraletVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoraletVersion(val *SoraletVersion) *NullableSoraletVersion {
	return &NullableSoraletVersion{value: val, isSet: true}
}

func (v NullableSoraletVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoraletVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


