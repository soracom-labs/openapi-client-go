/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Subscriber struct for Subscriber
type Subscriber struct {
	// The Access Point Name configured.
	Apn *string `json:"apn,omitempty"`
	Bundles []string `json:"bundles,omitempty"`
	// The timestamp that the SIM was created.
	CreatedAt *int64 `json:"createdAt,omitempty"`
	// The timestamp of a date and time where the SIM was expired.
	ExpiredAt *int64 `json:"expiredAt,omitempty"`
	// The timestamp of a date and time where the SIM was expired.
	ExpiredTime *int64 `json:"expiredTime,omitempty"`
	ExpiryAction *string `json:"expiryAction,omitempty"`
	// The SIM group ID where the SIM belongs to.
	GroupId *string `json:"groupId,omitempty"`
	// The ICCID of the SIM.
	Iccid *string `json:"iccid,omitempty"`
	ImeiLock *ImeiLock `json:"imeiLock,omitempty"`
	// The IMSI of the SIM.
	Imsi *string `json:"imsi,omitempty"`
	IpAddress *string `json:"ipAddress,omitempty"`
	// The timestamp when the SIM information was modified.
	LastModifiedAt *int64 `json:"lastModifiedAt,omitempty"`
	// The timestamp (in Unix milliseconds) of the last instance where the Napter On-Demand Remote Access service was used with the subscriber. If Napter has never been used with the subscriber, null is returned.
	LastPortMappingCreatedTime *int64 `json:"lastPortMappingCreatedTime,omitempty"`
	// The form factor of the physical SIM. Possible values are \"mini\" for 2FF SIM card, \"micro\" for 3FF SIM card, \"nano\" for 4FF SIM card, \"trio\" for a Universal 3-in-1 (2FF/3FF/4FF) SIM card, or \"embedded\" for MFF2 or Embedded SIM (eSIM).
	ModuleType *string `json:"moduleType,omitempty"`
	// The MSISDN of the SIM.
	Msisdn *string `json:"msisdn,omitempty"`
	// The Operator ID of the SIM.
	OperatorId *string `json:"operatorId,omitempty"`
	// Whether or not the subscription supports SMS functionality. 0 = SMS not supported; 1 = SMS supported.
	Plan *int32 `json:"plan,omitempty"`
	PreviousSession *PreviousSessionStatus `json:"previousSession,omitempty"`
	// The timestamp (in Unix milliseconds) that the subscriber was manually registered to your account. When purchasing SIMs directly through the User Console, SIMs will automatically be registered to your account, and null is returned.
	RegisteredTime *int64 `json:"registeredTime,omitempty"`
	// The serial number of the SIM.
	SerialNumber *string `json:"serialNumber,omitempty"`
	SessionStatus *SessionStatus `json:"sessionStatus,omitempty"`
	// The SIM ID of the SIM.
	SimId *string `json:"simId,omitempty"`
	// The speed class of the SIM.
	SpeedClass *string `json:"speedClass,omitempty"`
	// The subscription status of the subscriber. Possible values are \"ready\", \"active\", \"inactive\", \"standby\", \"suspended\", or \"terminated\".
	Status *string `json:"status,omitempty"`
	// The name of the subscription for the SIM.
	Subscription *string `json:"subscription,omitempty"`
	// An object which always contains at least one property \"name\" with a string value. If you give a subscriber/SIM a name, the name will be returned as the value of the \"name\" property. If the subscriber/SIM does not have a name, an empty string \"\" is returned. In addition, if you create any custom tags for the subscriber/SIM, each custom tag will appear as additional properties in the object.
	Tags *map[string]string `json:"tags,omitempty"`
	TerminationEnabled *bool `json:"terminationEnabled,omitempty"`
	// The speed class of the SIM.
	Type *string `json:"type,omitempty"`
}

// NewSubscriber instantiates a new Subscriber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriber() *Subscriber {
	this := Subscriber{}
	return &this
}

// NewSubscriberWithDefaults instantiates a new Subscriber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriberWithDefaults() *Subscriber {
	this := Subscriber{}
	return &this
}

// GetApn returns the Apn field value if set, zero value otherwise.
func (o *Subscriber) GetApn() string {
	if o == nil || o.Apn == nil {
		var ret string
		return ret
	}
	return *o.Apn
}

// GetApnOk returns a tuple with the Apn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetApnOk() (*string, bool) {
	if o == nil || o.Apn == nil {
		return nil, false
	}
	return o.Apn, true
}

// HasApn returns a boolean if a field has been set.
func (o *Subscriber) HasApn() bool {
	if o != nil && o.Apn != nil {
		return true
	}

	return false
}

// SetApn gets a reference to the given string and assigns it to the Apn field.
func (o *Subscriber) SetApn(v string) {
	o.Apn = &v
}

// GetBundles returns the Bundles field value if set, zero value otherwise.
func (o *Subscriber) GetBundles() []string {
	if o == nil || o.Bundles == nil {
		var ret []string
		return ret
	}
	return o.Bundles
}

// GetBundlesOk returns a tuple with the Bundles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetBundlesOk() ([]string, bool) {
	if o == nil || o.Bundles == nil {
		return nil, false
	}
	return o.Bundles, true
}

// HasBundles returns a boolean if a field has been set.
func (o *Subscriber) HasBundles() bool {
	if o != nil && o.Bundles != nil {
		return true
	}

	return false
}

// SetBundles gets a reference to the given []string and assigns it to the Bundles field.
func (o *Subscriber) SetBundles(v []string) {
	o.Bundles = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Subscriber) GetCreatedAt() int64 {
	if o == nil || o.CreatedAt == nil {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetCreatedAtOk() (*int64, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Subscriber) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *Subscriber) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise.
func (o *Subscriber) GetExpiredAt() int64 {
	if o == nil || o.ExpiredAt == nil {
		var ret int64
		return ret
	}
	return *o.ExpiredAt
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetExpiredAtOk() (*int64, bool) {
	if o == nil || o.ExpiredAt == nil {
		return nil, false
	}
	return o.ExpiredAt, true
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *Subscriber) HasExpiredAt() bool {
	if o != nil && o.ExpiredAt != nil {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given int64 and assigns it to the ExpiredAt field.
func (o *Subscriber) SetExpiredAt(v int64) {
	o.ExpiredAt = &v
}

// GetExpiredTime returns the ExpiredTime field value if set, zero value otherwise.
func (o *Subscriber) GetExpiredTime() int64 {
	if o == nil || o.ExpiredTime == nil {
		var ret int64
		return ret
	}
	return *o.ExpiredTime
}

// GetExpiredTimeOk returns a tuple with the ExpiredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetExpiredTimeOk() (*int64, bool) {
	if o == nil || o.ExpiredTime == nil {
		return nil, false
	}
	return o.ExpiredTime, true
}

// HasExpiredTime returns a boolean if a field has been set.
func (o *Subscriber) HasExpiredTime() bool {
	if o != nil && o.ExpiredTime != nil {
		return true
	}

	return false
}

// SetExpiredTime gets a reference to the given int64 and assigns it to the ExpiredTime field.
func (o *Subscriber) SetExpiredTime(v int64) {
	o.ExpiredTime = &v
}

// GetExpiryAction returns the ExpiryAction field value if set, zero value otherwise.
func (o *Subscriber) GetExpiryAction() string {
	if o == nil || o.ExpiryAction == nil {
		var ret string
		return ret
	}
	return *o.ExpiryAction
}

// GetExpiryActionOk returns a tuple with the ExpiryAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetExpiryActionOk() (*string, bool) {
	if o == nil || o.ExpiryAction == nil {
		return nil, false
	}
	return o.ExpiryAction, true
}

// HasExpiryAction returns a boolean if a field has been set.
func (o *Subscriber) HasExpiryAction() bool {
	if o != nil && o.ExpiryAction != nil {
		return true
	}

	return false
}

// SetExpiryAction gets a reference to the given string and assigns it to the ExpiryAction field.
func (o *Subscriber) SetExpiryAction(v string) {
	o.ExpiryAction = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *Subscriber) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *Subscriber) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *Subscriber) SetGroupId(v string) {
	o.GroupId = &v
}

// GetIccid returns the Iccid field value if set, zero value otherwise.
func (o *Subscriber) GetIccid() string {
	if o == nil || o.Iccid == nil {
		var ret string
		return ret
	}
	return *o.Iccid
}

// GetIccidOk returns a tuple with the Iccid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetIccidOk() (*string, bool) {
	if o == nil || o.Iccid == nil {
		return nil, false
	}
	return o.Iccid, true
}

// HasIccid returns a boolean if a field has been set.
func (o *Subscriber) HasIccid() bool {
	if o != nil && o.Iccid != nil {
		return true
	}

	return false
}

// SetIccid gets a reference to the given string and assigns it to the Iccid field.
func (o *Subscriber) SetIccid(v string) {
	o.Iccid = &v
}

// GetImeiLock returns the ImeiLock field value if set, zero value otherwise.
func (o *Subscriber) GetImeiLock() ImeiLock {
	if o == nil || o.ImeiLock == nil {
		var ret ImeiLock
		return ret
	}
	return *o.ImeiLock
}

// GetImeiLockOk returns a tuple with the ImeiLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetImeiLockOk() (*ImeiLock, bool) {
	if o == nil || o.ImeiLock == nil {
		return nil, false
	}
	return o.ImeiLock, true
}

// HasImeiLock returns a boolean if a field has been set.
func (o *Subscriber) HasImeiLock() bool {
	if o != nil && o.ImeiLock != nil {
		return true
	}

	return false
}

// SetImeiLock gets a reference to the given ImeiLock and assigns it to the ImeiLock field.
func (o *Subscriber) SetImeiLock(v ImeiLock) {
	o.ImeiLock = &v
}

// GetImsi returns the Imsi field value if set, zero value otherwise.
func (o *Subscriber) GetImsi() string {
	if o == nil || o.Imsi == nil {
		var ret string
		return ret
	}
	return *o.Imsi
}

// GetImsiOk returns a tuple with the Imsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetImsiOk() (*string, bool) {
	if o == nil || o.Imsi == nil {
		return nil, false
	}
	return o.Imsi, true
}

// HasImsi returns a boolean if a field has been set.
func (o *Subscriber) HasImsi() bool {
	if o != nil && o.Imsi != nil {
		return true
	}

	return false
}

// SetImsi gets a reference to the given string and assigns it to the Imsi field.
func (o *Subscriber) SetImsi(v string) {
	o.Imsi = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *Subscriber) GetIpAddress() string {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetIpAddressOk() (*string, bool) {
	if o == nil || o.IpAddress == nil {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *Subscriber) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *Subscriber) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetLastModifiedAt returns the LastModifiedAt field value if set, zero value otherwise.
func (o *Subscriber) GetLastModifiedAt() int64 {
	if o == nil || o.LastModifiedAt == nil {
		var ret int64
		return ret
	}
	return *o.LastModifiedAt
}

// GetLastModifiedAtOk returns a tuple with the LastModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetLastModifiedAtOk() (*int64, bool) {
	if o == nil || o.LastModifiedAt == nil {
		return nil, false
	}
	return o.LastModifiedAt, true
}

// HasLastModifiedAt returns a boolean if a field has been set.
func (o *Subscriber) HasLastModifiedAt() bool {
	if o != nil && o.LastModifiedAt != nil {
		return true
	}

	return false
}

// SetLastModifiedAt gets a reference to the given int64 and assigns it to the LastModifiedAt field.
func (o *Subscriber) SetLastModifiedAt(v int64) {
	o.LastModifiedAt = &v
}

// GetLastPortMappingCreatedTime returns the LastPortMappingCreatedTime field value if set, zero value otherwise.
func (o *Subscriber) GetLastPortMappingCreatedTime() int64 {
	if o == nil || o.LastPortMappingCreatedTime == nil {
		var ret int64
		return ret
	}
	return *o.LastPortMappingCreatedTime
}

// GetLastPortMappingCreatedTimeOk returns a tuple with the LastPortMappingCreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetLastPortMappingCreatedTimeOk() (*int64, bool) {
	if o == nil || o.LastPortMappingCreatedTime == nil {
		return nil, false
	}
	return o.LastPortMappingCreatedTime, true
}

// HasLastPortMappingCreatedTime returns a boolean if a field has been set.
func (o *Subscriber) HasLastPortMappingCreatedTime() bool {
	if o != nil && o.LastPortMappingCreatedTime != nil {
		return true
	}

	return false
}

// SetLastPortMappingCreatedTime gets a reference to the given int64 and assigns it to the LastPortMappingCreatedTime field.
func (o *Subscriber) SetLastPortMappingCreatedTime(v int64) {
	o.LastPortMappingCreatedTime = &v
}

// GetModuleType returns the ModuleType field value if set, zero value otherwise.
func (o *Subscriber) GetModuleType() string {
	if o == nil || o.ModuleType == nil {
		var ret string
		return ret
	}
	return *o.ModuleType
}

// GetModuleTypeOk returns a tuple with the ModuleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetModuleTypeOk() (*string, bool) {
	if o == nil || o.ModuleType == nil {
		return nil, false
	}
	return o.ModuleType, true
}

// HasModuleType returns a boolean if a field has been set.
func (o *Subscriber) HasModuleType() bool {
	if o != nil && o.ModuleType != nil {
		return true
	}

	return false
}

// SetModuleType gets a reference to the given string and assigns it to the ModuleType field.
func (o *Subscriber) SetModuleType(v string) {
	o.ModuleType = &v
}

// GetMsisdn returns the Msisdn field value if set, zero value otherwise.
func (o *Subscriber) GetMsisdn() string {
	if o == nil || o.Msisdn == nil {
		var ret string
		return ret
	}
	return *o.Msisdn
}

// GetMsisdnOk returns a tuple with the Msisdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetMsisdnOk() (*string, bool) {
	if o == nil || o.Msisdn == nil {
		return nil, false
	}
	return o.Msisdn, true
}

// HasMsisdn returns a boolean if a field has been set.
func (o *Subscriber) HasMsisdn() bool {
	if o != nil && o.Msisdn != nil {
		return true
	}

	return false
}

// SetMsisdn gets a reference to the given string and assigns it to the Msisdn field.
func (o *Subscriber) SetMsisdn(v string) {
	o.Msisdn = &v
}

// GetOperatorId returns the OperatorId field value if set, zero value otherwise.
func (o *Subscriber) GetOperatorId() string {
	if o == nil || o.OperatorId == nil {
		var ret string
		return ret
	}
	return *o.OperatorId
}

// GetOperatorIdOk returns a tuple with the OperatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetOperatorIdOk() (*string, bool) {
	if o == nil || o.OperatorId == nil {
		return nil, false
	}
	return o.OperatorId, true
}

// HasOperatorId returns a boolean if a field has been set.
func (o *Subscriber) HasOperatorId() bool {
	if o != nil && o.OperatorId != nil {
		return true
	}

	return false
}

// SetOperatorId gets a reference to the given string and assigns it to the OperatorId field.
func (o *Subscriber) SetOperatorId(v string) {
	o.OperatorId = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *Subscriber) GetPlan() int32 {
	if o == nil || o.Plan == nil {
		var ret int32
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetPlanOk() (*int32, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *Subscriber) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given int32 and assigns it to the Plan field.
func (o *Subscriber) SetPlan(v int32) {
	o.Plan = &v
}

// GetPreviousSession returns the PreviousSession field value if set, zero value otherwise.
func (o *Subscriber) GetPreviousSession() PreviousSessionStatus {
	if o == nil || o.PreviousSession == nil {
		var ret PreviousSessionStatus
		return ret
	}
	return *o.PreviousSession
}

// GetPreviousSessionOk returns a tuple with the PreviousSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetPreviousSessionOk() (*PreviousSessionStatus, bool) {
	if o == nil || o.PreviousSession == nil {
		return nil, false
	}
	return o.PreviousSession, true
}

// HasPreviousSession returns a boolean if a field has been set.
func (o *Subscriber) HasPreviousSession() bool {
	if o != nil && o.PreviousSession != nil {
		return true
	}

	return false
}

// SetPreviousSession gets a reference to the given PreviousSessionStatus and assigns it to the PreviousSession field.
func (o *Subscriber) SetPreviousSession(v PreviousSessionStatus) {
	o.PreviousSession = &v
}

// GetRegisteredTime returns the RegisteredTime field value if set, zero value otherwise.
func (o *Subscriber) GetRegisteredTime() int64 {
	if o == nil || o.RegisteredTime == nil {
		var ret int64
		return ret
	}
	return *o.RegisteredTime
}

// GetRegisteredTimeOk returns a tuple with the RegisteredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetRegisteredTimeOk() (*int64, bool) {
	if o == nil || o.RegisteredTime == nil {
		return nil, false
	}
	return o.RegisteredTime, true
}

// HasRegisteredTime returns a boolean if a field has been set.
func (o *Subscriber) HasRegisteredTime() bool {
	if o != nil && o.RegisteredTime != nil {
		return true
	}

	return false
}

// SetRegisteredTime gets a reference to the given int64 and assigns it to the RegisteredTime field.
func (o *Subscriber) SetRegisteredTime(v int64) {
	o.RegisteredTime = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *Subscriber) GetSerialNumber() string {
	if o == nil || o.SerialNumber == nil {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetSerialNumberOk() (*string, bool) {
	if o == nil || o.SerialNumber == nil {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *Subscriber) HasSerialNumber() bool {
	if o != nil && o.SerialNumber != nil {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *Subscriber) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetSessionStatus returns the SessionStatus field value if set, zero value otherwise.
func (o *Subscriber) GetSessionStatus() SessionStatus {
	if o == nil || o.SessionStatus == nil {
		var ret SessionStatus
		return ret
	}
	return *o.SessionStatus
}

// GetSessionStatusOk returns a tuple with the SessionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetSessionStatusOk() (*SessionStatus, bool) {
	if o == nil || o.SessionStatus == nil {
		return nil, false
	}
	return o.SessionStatus, true
}

// HasSessionStatus returns a boolean if a field has been set.
func (o *Subscriber) HasSessionStatus() bool {
	if o != nil && o.SessionStatus != nil {
		return true
	}

	return false
}

// SetSessionStatus gets a reference to the given SessionStatus and assigns it to the SessionStatus field.
func (o *Subscriber) SetSessionStatus(v SessionStatus) {
	o.SessionStatus = &v
}

// GetSimId returns the SimId field value if set, zero value otherwise.
func (o *Subscriber) GetSimId() string {
	if o == nil || o.SimId == nil {
		var ret string
		return ret
	}
	return *o.SimId
}

// GetSimIdOk returns a tuple with the SimId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetSimIdOk() (*string, bool) {
	if o == nil || o.SimId == nil {
		return nil, false
	}
	return o.SimId, true
}

// HasSimId returns a boolean if a field has been set.
func (o *Subscriber) HasSimId() bool {
	if o != nil && o.SimId != nil {
		return true
	}

	return false
}

// SetSimId gets a reference to the given string and assigns it to the SimId field.
func (o *Subscriber) SetSimId(v string) {
	o.SimId = &v
}

// GetSpeedClass returns the SpeedClass field value if set, zero value otherwise.
func (o *Subscriber) GetSpeedClass() string {
	if o == nil || o.SpeedClass == nil {
		var ret string
		return ret
	}
	return *o.SpeedClass
}

// GetSpeedClassOk returns a tuple with the SpeedClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetSpeedClassOk() (*string, bool) {
	if o == nil || o.SpeedClass == nil {
		return nil, false
	}
	return o.SpeedClass, true
}

// HasSpeedClass returns a boolean if a field has been set.
func (o *Subscriber) HasSpeedClass() bool {
	if o != nil && o.SpeedClass != nil {
		return true
	}

	return false
}

// SetSpeedClass gets a reference to the given string and assigns it to the SpeedClass field.
func (o *Subscriber) SetSpeedClass(v string) {
	o.SpeedClass = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Subscriber) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Subscriber) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Subscriber) SetStatus(v string) {
	o.Status = &v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *Subscriber) GetSubscription() string {
	if o == nil || o.Subscription == nil {
		var ret string
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetSubscriptionOk() (*string, bool) {
	if o == nil || o.Subscription == nil {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *Subscriber) HasSubscription() bool {
	if o != nil && o.Subscription != nil {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given string and assigns it to the Subscription field.
func (o *Subscriber) SetSubscription(v string) {
	o.Subscription = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Subscriber) GetTags() map[string]string {
	if o == nil || o.Tags == nil {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetTagsOk() (*map[string]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Subscriber) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *Subscriber) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetTerminationEnabled returns the TerminationEnabled field value if set, zero value otherwise.
func (o *Subscriber) GetTerminationEnabled() bool {
	if o == nil || o.TerminationEnabled == nil {
		var ret bool
		return ret
	}
	return *o.TerminationEnabled
}

// GetTerminationEnabledOk returns a tuple with the TerminationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetTerminationEnabledOk() (*bool, bool) {
	if o == nil || o.TerminationEnabled == nil {
		return nil, false
	}
	return o.TerminationEnabled, true
}

// HasTerminationEnabled returns a boolean if a field has been set.
func (o *Subscriber) HasTerminationEnabled() bool {
	if o != nil && o.TerminationEnabled != nil {
		return true
	}

	return false
}

// SetTerminationEnabled gets a reference to the given bool and assigns it to the TerminationEnabled field.
func (o *Subscriber) SetTerminationEnabled(v bool) {
	o.TerminationEnabled = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Subscriber) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Subscriber) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Subscriber) SetType(v string) {
	o.Type = &v
}

func (o Subscriber) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Apn != nil {
		toSerialize["apn"] = o.Apn
	}
	if o.Bundles != nil {
		toSerialize["bundles"] = o.Bundles
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.ExpiredAt != nil {
		toSerialize["expiredAt"] = o.ExpiredAt
	}
	if o.ExpiredTime != nil {
		toSerialize["expiredTime"] = o.ExpiredTime
	}
	if o.ExpiryAction != nil {
		toSerialize["expiryAction"] = o.ExpiryAction
	}
	if o.GroupId != nil {
		toSerialize["groupId"] = o.GroupId
	}
	if o.Iccid != nil {
		toSerialize["iccid"] = o.Iccid
	}
	if o.ImeiLock != nil {
		toSerialize["imeiLock"] = o.ImeiLock
	}
	if o.Imsi != nil {
		toSerialize["imsi"] = o.Imsi
	}
	if o.IpAddress != nil {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if o.LastModifiedAt != nil {
		toSerialize["lastModifiedAt"] = o.LastModifiedAt
	}
	if o.LastPortMappingCreatedTime != nil {
		toSerialize["lastPortMappingCreatedTime"] = o.LastPortMappingCreatedTime
	}
	if o.ModuleType != nil {
		toSerialize["moduleType"] = o.ModuleType
	}
	if o.Msisdn != nil {
		toSerialize["msisdn"] = o.Msisdn
	}
	if o.OperatorId != nil {
		toSerialize["operatorId"] = o.OperatorId
	}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	if o.PreviousSession != nil {
		toSerialize["previousSession"] = o.PreviousSession
	}
	if o.RegisteredTime != nil {
		toSerialize["registeredTime"] = o.RegisteredTime
	}
	if o.SerialNumber != nil {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if o.SessionStatus != nil {
		toSerialize["sessionStatus"] = o.SessionStatus
	}
	if o.SimId != nil {
		toSerialize["simId"] = o.SimId
	}
	if o.SpeedClass != nil {
		toSerialize["speedClass"] = o.SpeedClass
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Subscription != nil {
		toSerialize["subscription"] = o.Subscription
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TerminationEnabled != nil {
		toSerialize["terminationEnabled"] = o.TerminationEnabled
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriber struct {
	value *Subscriber
	isSet bool
}

func (v NullableSubscriber) Get() *Subscriber {
	return v.value
}

func (v *NullableSubscriber) Set(val *Subscriber) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriber) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriber(val *Subscriber) *NullableSubscriber {
	return &NullableSubscriber{value: val, isSet: true}
}

func (v NullableSubscriber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


