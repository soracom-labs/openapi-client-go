/*
SORACOM API

SORACOM API v1

API version: VERSION_PLACEHOLDER
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SystemNotificationsModel struct for SystemNotificationsModel
type SystemNotificationsModel struct {
	EmailIdList []string `json:"emailIdList,omitempty"`
	// Notification type
	Type *string `json:"type,omitempty"`
	UpdateDateTime *int64 `json:"updateDateTime,omitempty"`
}

// NewSystemNotificationsModel instantiates a new SystemNotificationsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemNotificationsModel() *SystemNotificationsModel {
	this := SystemNotificationsModel{}
	return &this
}

// NewSystemNotificationsModelWithDefaults instantiates a new SystemNotificationsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemNotificationsModelWithDefaults() *SystemNotificationsModel {
	this := SystemNotificationsModel{}
	return &this
}

// GetEmailIdList returns the EmailIdList field value if set, zero value otherwise.
func (o *SystemNotificationsModel) GetEmailIdList() []string {
	if o == nil || o.EmailIdList == nil {
		var ret []string
		return ret
	}
	return o.EmailIdList
}

// GetEmailIdListOk returns a tuple with the EmailIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemNotificationsModel) GetEmailIdListOk() ([]string, bool) {
	if o == nil || o.EmailIdList == nil {
		return nil, false
	}
	return o.EmailIdList, true
}

// HasEmailIdList returns a boolean if a field has been set.
func (o *SystemNotificationsModel) HasEmailIdList() bool {
	if o != nil && o.EmailIdList != nil {
		return true
	}

	return false
}

// SetEmailIdList gets a reference to the given []string and assigns it to the EmailIdList field.
func (o *SystemNotificationsModel) SetEmailIdList(v []string) {
	o.EmailIdList = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SystemNotificationsModel) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemNotificationsModel) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SystemNotificationsModel) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SystemNotificationsModel) SetType(v string) {
	o.Type = &v
}

// GetUpdateDateTime returns the UpdateDateTime field value if set, zero value otherwise.
func (o *SystemNotificationsModel) GetUpdateDateTime() int64 {
	if o == nil || o.UpdateDateTime == nil {
		var ret int64
		return ret
	}
	return *o.UpdateDateTime
}

// GetUpdateDateTimeOk returns a tuple with the UpdateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemNotificationsModel) GetUpdateDateTimeOk() (*int64, bool) {
	if o == nil || o.UpdateDateTime == nil {
		return nil, false
	}
	return o.UpdateDateTime, true
}

// HasUpdateDateTime returns a boolean if a field has been set.
func (o *SystemNotificationsModel) HasUpdateDateTime() bool {
	if o != nil && o.UpdateDateTime != nil {
		return true
	}

	return false
}

// SetUpdateDateTime gets a reference to the given int64 and assigns it to the UpdateDateTime field.
func (o *SystemNotificationsModel) SetUpdateDateTime(v int64) {
	o.UpdateDateTime = &v
}

func (o SystemNotificationsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EmailIdList != nil {
		toSerialize["emailIdList"] = o.EmailIdList
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UpdateDateTime != nil {
		toSerialize["updateDateTime"] = o.UpdateDateTime
	}
	return json.Marshal(toSerialize)
}

type NullableSystemNotificationsModel struct {
	value *SystemNotificationsModel
	isSet bool
}

func (v NullableSystemNotificationsModel) Get() *SystemNotificationsModel {
	return v.value
}

func (v *NullableSystemNotificationsModel) Set(val *SystemNotificationsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemNotificationsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemNotificationsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemNotificationsModel(val *SystemNotificationsModel) *NullableSystemNotificationsModel {
	return &NullableSystemNotificationsModel{value: val, isSet: true}
}

func (v NullableSystemNotificationsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemNotificationsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


