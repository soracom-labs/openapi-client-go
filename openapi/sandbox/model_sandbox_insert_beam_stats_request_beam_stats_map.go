/*
SORACOM SANDBOX API

SORACOM SANDBOX API v1

API version: 20160218
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sandbox

import (
	"encoding/json"
)

// SandboxInsertBeamStatsRequestBeamStatsMap struct for SandboxInsertBeamStatsRequestBeamStatsMap
type SandboxInsertBeamStatsRequestBeamStatsMap struct {
	InHttp *SandboxBeamCounts `json:"inHttp,omitempty"`
	InMqtt *SandboxBeamCounts `json:"inMqtt,omitempty"`
	InTcp *SandboxBeamCounts `json:"inTcp,omitempty"`
	InUdp *SandboxBeamCounts `json:"inUdp,omitempty"`
	OutHttp *SandboxBeamCounts `json:"outHttp,omitempty"`
	OutHttps *SandboxBeamCounts `json:"outHttps,omitempty"`
	OutMqtt *SandboxBeamCounts `json:"outMqtt,omitempty"`
	OutMqtts *SandboxBeamCounts `json:"outMqtts,omitempty"`
	OutTcp *SandboxBeamCounts `json:"outTcp,omitempty"`
	OutTcps *SandboxBeamCounts `json:"outTcps,omitempty"`
	OutUdp *SandboxBeamCounts `json:"outUdp,omitempty"`
}

// NewSandboxInsertBeamStatsRequestBeamStatsMap instantiates a new SandboxInsertBeamStatsRequestBeamStatsMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSandboxInsertBeamStatsRequestBeamStatsMap() *SandboxInsertBeamStatsRequestBeamStatsMap {
	this := SandboxInsertBeamStatsRequestBeamStatsMap{}
	return &this
}

// NewSandboxInsertBeamStatsRequestBeamStatsMapWithDefaults instantiates a new SandboxInsertBeamStatsRequestBeamStatsMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSandboxInsertBeamStatsRequestBeamStatsMapWithDefaults() *SandboxInsertBeamStatsRequestBeamStatsMap {
	this := SandboxInsertBeamStatsRequestBeamStatsMap{}
	return &this
}

// GetInHttp returns the InHttp field value if set, zero value otherwise.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetInHttp() SandboxBeamCounts {
	if o == nil || o.InHttp == nil {
		var ret SandboxBeamCounts
		return ret
	}
	return *o.InHttp
}

// GetInHttpOk returns a tuple with the InHttp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetInHttpOk() (*SandboxBeamCounts, bool) {
	if o == nil || o.InHttp == nil {
		return nil, false
	}
	return o.InHttp, true
}

// HasInHttp returns a boolean if a field has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) HasInHttp() bool {
	if o != nil && o.InHttp != nil {
		return true
	}

	return false
}

// SetInHttp gets a reference to the given SandboxBeamCounts and assigns it to the InHttp field.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) SetInHttp(v SandboxBeamCounts) {
	o.InHttp = &v
}

// GetInMqtt returns the InMqtt field value if set, zero value otherwise.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetInMqtt() SandboxBeamCounts {
	if o == nil || o.InMqtt == nil {
		var ret SandboxBeamCounts
		return ret
	}
	return *o.InMqtt
}

// GetInMqttOk returns a tuple with the InMqtt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetInMqttOk() (*SandboxBeamCounts, bool) {
	if o == nil || o.InMqtt == nil {
		return nil, false
	}
	return o.InMqtt, true
}

// HasInMqtt returns a boolean if a field has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) HasInMqtt() bool {
	if o != nil && o.InMqtt != nil {
		return true
	}

	return false
}

// SetInMqtt gets a reference to the given SandboxBeamCounts and assigns it to the InMqtt field.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) SetInMqtt(v SandboxBeamCounts) {
	o.InMqtt = &v
}

// GetInTcp returns the InTcp field value if set, zero value otherwise.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetInTcp() SandboxBeamCounts {
	if o == nil || o.InTcp == nil {
		var ret SandboxBeamCounts
		return ret
	}
	return *o.InTcp
}

// GetInTcpOk returns a tuple with the InTcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetInTcpOk() (*SandboxBeamCounts, bool) {
	if o == nil || o.InTcp == nil {
		return nil, false
	}
	return o.InTcp, true
}

// HasInTcp returns a boolean if a field has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) HasInTcp() bool {
	if o != nil && o.InTcp != nil {
		return true
	}

	return false
}

// SetInTcp gets a reference to the given SandboxBeamCounts and assigns it to the InTcp field.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) SetInTcp(v SandboxBeamCounts) {
	o.InTcp = &v
}

// GetInUdp returns the InUdp field value if set, zero value otherwise.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetInUdp() SandboxBeamCounts {
	if o == nil || o.InUdp == nil {
		var ret SandboxBeamCounts
		return ret
	}
	return *o.InUdp
}

// GetInUdpOk returns a tuple with the InUdp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetInUdpOk() (*SandboxBeamCounts, bool) {
	if o == nil || o.InUdp == nil {
		return nil, false
	}
	return o.InUdp, true
}

// HasInUdp returns a boolean if a field has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) HasInUdp() bool {
	if o != nil && o.InUdp != nil {
		return true
	}

	return false
}

// SetInUdp gets a reference to the given SandboxBeamCounts and assigns it to the InUdp field.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) SetInUdp(v SandboxBeamCounts) {
	o.InUdp = &v
}

// GetOutHttp returns the OutHttp field value if set, zero value otherwise.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutHttp() SandboxBeamCounts {
	if o == nil || o.OutHttp == nil {
		var ret SandboxBeamCounts
		return ret
	}
	return *o.OutHttp
}

// GetOutHttpOk returns a tuple with the OutHttp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutHttpOk() (*SandboxBeamCounts, bool) {
	if o == nil || o.OutHttp == nil {
		return nil, false
	}
	return o.OutHttp, true
}

// HasOutHttp returns a boolean if a field has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) HasOutHttp() bool {
	if o != nil && o.OutHttp != nil {
		return true
	}

	return false
}

// SetOutHttp gets a reference to the given SandboxBeamCounts and assigns it to the OutHttp field.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) SetOutHttp(v SandboxBeamCounts) {
	o.OutHttp = &v
}

// GetOutHttps returns the OutHttps field value if set, zero value otherwise.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutHttps() SandboxBeamCounts {
	if o == nil || o.OutHttps == nil {
		var ret SandboxBeamCounts
		return ret
	}
	return *o.OutHttps
}

// GetOutHttpsOk returns a tuple with the OutHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutHttpsOk() (*SandboxBeamCounts, bool) {
	if o == nil || o.OutHttps == nil {
		return nil, false
	}
	return o.OutHttps, true
}

// HasOutHttps returns a boolean if a field has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) HasOutHttps() bool {
	if o != nil && o.OutHttps != nil {
		return true
	}

	return false
}

// SetOutHttps gets a reference to the given SandboxBeamCounts and assigns it to the OutHttps field.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) SetOutHttps(v SandboxBeamCounts) {
	o.OutHttps = &v
}

// GetOutMqtt returns the OutMqtt field value if set, zero value otherwise.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutMqtt() SandboxBeamCounts {
	if o == nil || o.OutMqtt == nil {
		var ret SandboxBeamCounts
		return ret
	}
	return *o.OutMqtt
}

// GetOutMqttOk returns a tuple with the OutMqtt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutMqttOk() (*SandboxBeamCounts, bool) {
	if o == nil || o.OutMqtt == nil {
		return nil, false
	}
	return o.OutMqtt, true
}

// HasOutMqtt returns a boolean if a field has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) HasOutMqtt() bool {
	if o != nil && o.OutMqtt != nil {
		return true
	}

	return false
}

// SetOutMqtt gets a reference to the given SandboxBeamCounts and assigns it to the OutMqtt field.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) SetOutMqtt(v SandboxBeamCounts) {
	o.OutMqtt = &v
}

// GetOutMqtts returns the OutMqtts field value if set, zero value otherwise.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutMqtts() SandboxBeamCounts {
	if o == nil || o.OutMqtts == nil {
		var ret SandboxBeamCounts
		return ret
	}
	return *o.OutMqtts
}

// GetOutMqttsOk returns a tuple with the OutMqtts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutMqttsOk() (*SandboxBeamCounts, bool) {
	if o == nil || o.OutMqtts == nil {
		return nil, false
	}
	return o.OutMqtts, true
}

// HasOutMqtts returns a boolean if a field has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) HasOutMqtts() bool {
	if o != nil && o.OutMqtts != nil {
		return true
	}

	return false
}

// SetOutMqtts gets a reference to the given SandboxBeamCounts and assigns it to the OutMqtts field.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) SetOutMqtts(v SandboxBeamCounts) {
	o.OutMqtts = &v
}

// GetOutTcp returns the OutTcp field value if set, zero value otherwise.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutTcp() SandboxBeamCounts {
	if o == nil || o.OutTcp == nil {
		var ret SandboxBeamCounts
		return ret
	}
	return *o.OutTcp
}

// GetOutTcpOk returns a tuple with the OutTcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutTcpOk() (*SandboxBeamCounts, bool) {
	if o == nil || o.OutTcp == nil {
		return nil, false
	}
	return o.OutTcp, true
}

// HasOutTcp returns a boolean if a field has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) HasOutTcp() bool {
	if o != nil && o.OutTcp != nil {
		return true
	}

	return false
}

// SetOutTcp gets a reference to the given SandboxBeamCounts and assigns it to the OutTcp field.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) SetOutTcp(v SandboxBeamCounts) {
	o.OutTcp = &v
}

// GetOutTcps returns the OutTcps field value if set, zero value otherwise.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutTcps() SandboxBeamCounts {
	if o == nil || o.OutTcps == nil {
		var ret SandboxBeamCounts
		return ret
	}
	return *o.OutTcps
}

// GetOutTcpsOk returns a tuple with the OutTcps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutTcpsOk() (*SandboxBeamCounts, bool) {
	if o == nil || o.OutTcps == nil {
		return nil, false
	}
	return o.OutTcps, true
}

// HasOutTcps returns a boolean if a field has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) HasOutTcps() bool {
	if o != nil && o.OutTcps != nil {
		return true
	}

	return false
}

// SetOutTcps gets a reference to the given SandboxBeamCounts and assigns it to the OutTcps field.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) SetOutTcps(v SandboxBeamCounts) {
	o.OutTcps = &v
}

// GetOutUdp returns the OutUdp field value if set, zero value otherwise.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutUdp() SandboxBeamCounts {
	if o == nil || o.OutUdp == nil {
		var ret SandboxBeamCounts
		return ret
	}
	return *o.OutUdp
}

// GetOutUdpOk returns a tuple with the OutUdp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) GetOutUdpOk() (*SandboxBeamCounts, bool) {
	if o == nil || o.OutUdp == nil {
		return nil, false
	}
	return o.OutUdp, true
}

// HasOutUdp returns a boolean if a field has been set.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) HasOutUdp() bool {
	if o != nil && o.OutUdp != nil {
		return true
	}

	return false
}

// SetOutUdp gets a reference to the given SandboxBeamCounts and assigns it to the OutUdp field.
func (o *SandboxInsertBeamStatsRequestBeamStatsMap) SetOutUdp(v SandboxBeamCounts) {
	o.OutUdp = &v
}

func (o SandboxInsertBeamStatsRequestBeamStatsMap) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InHttp != nil {
		toSerialize["inHttp"] = o.InHttp
	}
	if o.InMqtt != nil {
		toSerialize["inMqtt"] = o.InMqtt
	}
	if o.InTcp != nil {
		toSerialize["inTcp"] = o.InTcp
	}
	if o.InUdp != nil {
		toSerialize["inUdp"] = o.InUdp
	}
	if o.OutHttp != nil {
		toSerialize["outHttp"] = o.OutHttp
	}
	if o.OutHttps != nil {
		toSerialize["outHttps"] = o.OutHttps
	}
	if o.OutMqtt != nil {
		toSerialize["outMqtt"] = o.OutMqtt
	}
	if o.OutMqtts != nil {
		toSerialize["outMqtts"] = o.OutMqtts
	}
	if o.OutTcp != nil {
		toSerialize["outTcp"] = o.OutTcp
	}
	if o.OutTcps != nil {
		toSerialize["outTcps"] = o.OutTcps
	}
	if o.OutUdp != nil {
		toSerialize["outUdp"] = o.OutUdp
	}
	return json.Marshal(toSerialize)
}

type NullableSandboxInsertBeamStatsRequestBeamStatsMap struct {
	value *SandboxInsertBeamStatsRequestBeamStatsMap
	isSet bool
}

func (v NullableSandboxInsertBeamStatsRequestBeamStatsMap) Get() *SandboxInsertBeamStatsRequestBeamStatsMap {
	return v.value
}

func (v *NullableSandboxInsertBeamStatsRequestBeamStatsMap) Set(val *SandboxInsertBeamStatsRequestBeamStatsMap) {
	v.value = val
	v.isSet = true
}

func (v NullableSandboxInsertBeamStatsRequestBeamStatsMap) IsSet() bool {
	return v.isSet
}

func (v *NullableSandboxInsertBeamStatsRequestBeamStatsMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSandboxInsertBeamStatsRequestBeamStatsMap(val *SandboxInsertBeamStatsRequestBeamStatsMap) *NullableSandboxInsertBeamStatsRequestBeamStatsMap {
	return &NullableSandboxInsertBeamStatsRequestBeamStatsMap{value: val, isSet: true}
}

func (v NullableSandboxInsertBeamStatsRequestBeamStatsMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSandboxInsertBeamStatsRequestBeamStatsMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


