{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"api/","text":"SORACOM API \u00b6 Example \u00b6 Authentication \u00b6 To execute API calls, you must first authenticate your SORACOM account using one of the following authentication methods: Root Account - authenticate using your SORACOM email and password login information AuthKey - authenticate using a AuthKeyId and AuthKey Here's an example to get API key with AuthKey package main import ( \"context\" \"fmt\" \"os\" soracom \"github.com/soracom-labs/openapi-client-go/openapi/api\" ) func main() { client := soracom.NewAPIClient(soracom.NewConfiguration()) authKeyId := os.Getenv(\"SORACOM_AUTH_KEY_ID\") authKey := os.Getenv(\"SORACOM_AUTH_KEY\") authRequest := soracom.AuthRequest{ AuthKeyId: &authKeyId, AuthKey: &authKey, } resp, r, err := client.AuthApi.Auth(context.Background()).AuthRequest(authRequest).Execute() if err != nil { fmt.Println(err) } if r.StatusCode != 200 { fmt.Println(r) } fmt.Println(*resp.ApiKey, *resp.Token) } API call example \u00b6 Here's an example to list subscribers with known API keys package main import ( \"context\" \"fmt\" \"os\" soracom \"github.com/soracom-labs/openapi-client-go/openapi/api\" ) func main() { apiKey := os.Getenv(\"SORACOM_API_KEY\") token := os.Getenv(\"SORACOM_API_TOKEN\") config := soracom.NewConfiguration() client := soracom.NewAPIClient(config) contextApiKeys := map[string]soracom.APIKey{ \"api_key\": { Key: apiKey, }, \"api_token\": { Key: token, }, } ctx := context.WithValue(context.Background(), soracom.ContextAPIKeys, contextApiKeys) resp, r, err := client.SubscriberApi.ListSubscribers(ctx).Execute() if err != nil { fmt.Println(err) } if r.StatusCode != 200 { fmt.Println(r) } for _, subscriber := range resp { fmt.Println(subscriber.GetImsi(), subscriber.GetSimId()) } }","title":"SORACOM API"},{"location":"api/#soracom-api","text":"","title":"SORACOM API"},{"location":"api/#example","text":"","title":"Example"},{"location":"api/#authentication","text":"To execute API calls, you must first authenticate your SORACOM account using one of the following authentication methods: Root Account - authenticate using your SORACOM email and password login information AuthKey - authenticate using a AuthKeyId and AuthKey Here's an example to get API key with AuthKey package main import ( \"context\" \"fmt\" \"os\" soracom \"github.com/soracom-labs/openapi-client-go/openapi/api\" ) func main() { client := soracom.NewAPIClient(soracom.NewConfiguration()) authKeyId := os.Getenv(\"SORACOM_AUTH_KEY_ID\") authKey := os.Getenv(\"SORACOM_AUTH_KEY\") authRequest := soracom.AuthRequest{ AuthKeyId: &authKeyId, AuthKey: &authKey, } resp, r, err := client.AuthApi.Auth(context.Background()).AuthRequest(authRequest).Execute() if err != nil { fmt.Println(err) } if r.StatusCode != 200 { fmt.Println(r) } fmt.Println(*resp.ApiKey, *resp.Token) }","title":"Authentication"},{"location":"api/#api-call-example","text":"Here's an example to list subscribers with known API keys package main import ( \"context\" \"fmt\" \"os\" soracom \"github.com/soracom-labs/openapi-client-go/openapi/api\" ) func main() { apiKey := os.Getenv(\"SORACOM_API_KEY\") token := os.Getenv(\"SORACOM_API_TOKEN\") config := soracom.NewConfiguration() client := soracom.NewAPIClient(config) contextApiKeys := map[string]soracom.APIKey{ \"api_key\": { Key: apiKey, }, \"api_token\": { Key: token, }, } ctx := context.WithValue(context.Background(), soracom.ContextAPIKeys, contextApiKeys) resp, r, err := client.SubscriberApi.ListSubscribers(ctx).Execute() if err != nil { fmt.Println(err) } if r.StatusCode != 200 { fmt.Println(r) } for _, subscriber := range resp { fmt.Println(subscriber.GetImsi(), subscriber.GetSimId()) } }","title":"API call example"},{"location":"sandbox/","text":"SORACOM API Sandbox \u00b6 Example \u00b6 Initialize Sandbox Operator \u00b6 Here's an example to describe how to initialize Sandbox operator. package main import ( \"context\" \"fmt\" \"os\" \"strconv\" \"time\" \"github.com/soracom-labs/openapi-client-go/openapi/sandbox\" ) func main() { authKeyId := os.Getenv(\"SORACOM_AUTH_KEY_ID\") authKey := os.Getenv(\"SORACOM_AUTH_KEY\") randStr := strconv.FormatInt(time.Now().UnixNano(), 10) sandboxInitRequest := *sandbox.NewSandboxInitRequest(authKey, authKeyId, fmt.Sprintf(\"openapi-client-go-test+%s@soracom.jp\", randStr), fmt.Sprintf(\"Password%s\", randStr)) sandboxInitRequest.CoverageTypes = append(sandboxInitRequest.CoverageTypes, \"g\", \"jp\") configuration := sandbox.NewConfiguration() client := sandbox.NewAPIClient(configuration) resp, r, err := client.OperatorApi.SandboxInitializeOperator(context.Background()).SandboxInitRequest(sandboxInitRequest).Execute() if err != nil { fmt.Println(err) } if r.StatusCode != 200 { fmt.Println(r) } fmt.Println(*resp.ApiKey, *resp.Token) }","title":"SORACOM API Sandbox"},{"location":"sandbox/#soracom-api-sandbox","text":"","title":"SORACOM API Sandbox"},{"location":"sandbox/#example","text":"","title":"Example"},{"location":"sandbox/#initialize-sandbox-operator","text":"Here's an example to describe how to initialize Sandbox operator. package main import ( \"context\" \"fmt\" \"os\" \"strconv\" \"time\" \"github.com/soracom-labs/openapi-client-go/openapi/sandbox\" ) func main() { authKeyId := os.Getenv(\"SORACOM_AUTH_KEY_ID\") authKey := os.Getenv(\"SORACOM_AUTH_KEY\") randStr := strconv.FormatInt(time.Now().UnixNano(), 10) sandboxInitRequest := *sandbox.NewSandboxInitRequest(authKey, authKeyId, fmt.Sprintf(\"openapi-client-go-test+%s@soracom.jp\", randStr), fmt.Sprintf(\"Password%s\", randStr)) sandboxInitRequest.CoverageTypes = append(sandboxInitRequest.CoverageTypes, \"g\", \"jp\") configuration := sandbox.NewConfiguration() client := sandbox.NewAPIClient(configuration) resp, r, err := client.OperatorApi.SandboxInitializeOperator(context.Background()).SandboxInitRequest(sandboxInitRequest).Execute() if err != nil { fmt.Println(err) } if r.StatusCode != 200 { fmt.Println(r) } fmt.Println(*resp.ApiKey, *resp.Token) }","title":"Initialize Sandbox Operator"}]}